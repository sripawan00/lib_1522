{"version":3,"file":"lib-jitsi-meet.min.js","mappings":"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","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/./JitsiConferenceErrors.ts","webpack://JitsiMeetJS/./JitsiConferenceEvents.ts","webpack://JitsiMeetJS/./JitsiTrackEvents.ts","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiTrackErrors.ts","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.ts","webpack://JitsiMeetJS/./service/statistics/Events.ts","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.ts","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.ts","webpack://JitsiMeetJS/./JitsiConnectionErrors.ts","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/KeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://JitsiMeetJS/./node_modules/uuid/wrapper.mjs","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/ManagedKeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.ts","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.js","webpack://JitsiMeetJS/./modules/xmpp/BreakoutRooms.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/RoomMetadata.ts","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/JingleHelperFunctions.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.ts","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/util/connectionData.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./node_modules/async/dist/async.mjs","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.ts","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/sdp/SdpSimulcast.ts","webpack://JitsiMeetJS/./modules/connectivity/TrackStreamingStatus.ts","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.ts","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.ts","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.ts","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/trackRecorder.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.ts","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/CustomSignalingLayer.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.ts","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./JitsiMeetJS.ts","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./node_modules/jquery/dist/jquery.slim.min.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/index.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v1.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v3.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v35.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v4.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v5.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.ts","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./service/RTC/VideoType.ts","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./service/statistics/constants.ts","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.ts","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/runtime/node module decorator","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, function() {\nreturn ","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum JitsiConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Event fired when JVB sends notification about interrupted/restored user's\n     * ICE connection status or we detect local problem with the video track.\n     * First argument is the ID of the participant and\n     * the seconds is a string indicating if the connection is currently\n     * - active - the connection is active\n     * - inactive - the connection is inactive, was intentionally interrupted by\n     * the bridge\n     * - interrupted - a network problem occurred\n     * - restoring - the connection was inactive and is restoring now\n     *\n     * The current status value can be obtained by calling\n     * JitsiParticipant.getConnectionStatus().\n     */\n    PARTICIPANT_CONN_STATUS_CHANGED = 'conference.participant_conn_status_changed',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * A new face landmark object is added for a participant\n     */\n    FACE_LANDMARK_ADDED = 'conference.face_landmark.added',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated',\n\n    /**\n     * Event fired when the conference metadata is updated.\n     */\n    METADATA_UPDATED = 'conference.metadata.updated'\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTICIPANT_CONN_STATUS_CHANGED = JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = JitsiConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const FACE_LANDMARK_ADDED = JitsiConferenceEvents.FACE_LANDMARK_ADDED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\nexport const METADATA_UPDATED = JitsiConferenceEvents.METADATA_UPDATED;\n","export enum JitsiTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed',\n\n    /**\n     * An SSRC has been remapped. The track is now associated with a new participant.\n     */\n    TRACK_OWNER_CHANGED = 'track.owner_changed',\n\n    /**\n     * A track is being removed. Fired when a session terminates for tracks\n     * that persist in ssrc-rewriting mode.\n     */\n    TRACK_REMOVED = 'track.removed',\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\nexport const TRACK_OWNER_CHANGED = JitsiTrackEvents.TRACK_OWNER_CHANGED;\nexport const TRACK_REMOVED = JitsiTrackEvents.TRACK_REMOVED;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        // We do not want to enable unified plan on Electron clients that have Chromium version < 96 because of\n        // performance and screensharing issues.\n        return !(this.isReactNative() || (this.isElectron() && (this._getChromiumBasedVersion() < 96)));\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n/**\n * The audio context.\n * @type {AudioContext}\n */\nlet context = null;\n\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n    this.source = null;\n    this.analyser = null;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    context.resume();\n    this.analyser = context.createAnalyser();\n\n    this.analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    this.analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    this.source = context.createMediaStreamSource(this.stream);\n\n    this.source.connect(this.analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(this.analyser.frequencyBinCount);\n\n            this.analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n\n    this.analyser?.disconnect();\n    this.analyser = null;\n    this.source?.disconnect();\n    this.source = null;\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(window.AudioContext);\n};\n\n/**\n * Disconnects the audio context.\n */\nLocalStatsCollector.disconnectAudioContext = async function() {\n    if (context) {\n        logger.info('Disconnecting audio context');\n        await context.close();\n        context = null;\n    }\n};\n\n/**\n * Connects the audio context.\n */\nLocalStatsCollector.connectAudioContext = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    logger.info('Connecting audio context');\n    context = new AudioContext();\n\n    context.suspend();\n};\n\n/**\n * Initialize the audio context on startup.\n */\nLocalStatsCollector.connectAudioContext();\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The presenter type.\n     */\n    PRESENTER = 'presenter',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport browser from '../browser';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.runInLiteMode - Enables lite mode for testing to disable media decoding.\n     * @param {boolean} flags.receiveMultipleVideoStreams - Signal support for receiving multiple video streams.\n     * @param {boolean} flags.sendMultipleVideoStreams - Signal support for sending multiple video streams.\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     * @param {boolean} flags.ssrcRewritingEnabled - Use SSRC rewriting. Requires sourceNameSignaling to be enabled.\n     * @param {boolean} flags.enableUnifiedOnChrome - Use unified plan signaling on chrome browsers.\n     */\n    init(flags) {\n        this._runInLiteMode = Boolean(flags.runInLiteMode);\n        this._receiveMultipleVideoStreams = flags.receiveMultipleVideoStreams ?? true;\n        this._sendMultipleVideoStreams = flags.sendMultipleVideoStreams ?? true;\n        this._sourceNameSignaling = flags.sourceNameSignaling ?? true;\n        this._ssrcRewriting = this._sourceNameSignaling && Boolean(flags.ssrcRewritingEnabled);\n\n        // For Chromium, check if Unified plan is enabled.\n        this._usesUnifiedPlan = browser.supportsUnifiedPlan()\n            && (!browser.isChromiumBased() || (flags.enableUnifiedOnChrome ?? true));\n\n        logger.info(`Send multiple video streams: ${this._sendMultipleVideoStreams},`\n            + ` Source name signaling: ${this._sourceNameSignaling},`\n            + ` Unified plan: ${this._usesUnifiedPlan}`);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSupportEnabled() {\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams && this._usesUnifiedPlan;\n    }\n\n    /**\n     * Checks if receiving multiple video streams is supported.\n     *\n     * @returns {boolean}\n     */\n    isReceiveMultipleVideoStreamsSupported() {\n        return this._receiveMultipleVideoStreams;\n    }\n\n    /**\n     * Checks if the run in lite mode is enabled.\n     * This will cause any media to be received and not decoded. (Directions are inactive and no ssrc and ssrc-groups\n     * are added to the remote description). This can be used for various test scenarios.\n     *\n     * @returns {boolean}\n     */\n    isRunInLiteModeEnabled() {\n        return this._runInLiteMode;\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n\n    /**\n     * Checks if the clients supports re-writing of the SSRCs on the media streams by the bridge.\n     * @returns {boolean}\n     */\n    isSsrcRewritingSupported() {\n        return this._ssrcRewriting;\n    }\n}\n\nexport default new FeatureFlags();\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const sourceName = track.getSourceName();\n\n                if (sourceName) {\n                    const resolution = ssrcStats.resolution;\n\n                    if (resolution.width // eslint-disable-line max-depth\n                            && resolution.height\n                            && resolution.width !== -1\n                            && resolution.height !== -1) {\n                        resolutions[sourceName] = resolution;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        framerates[sourceName] = ssrcStats.framerate;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n\n                        codecs[sourceName] = codecDesc;\n                    }\n                } else {\n                    logger.error(`No source name returned by ${track}`);\n                }\n            } else {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    const resolution = ssrcStats.resolution;\n\n                    if (resolution.width // eslint-disable-line max-depth\n                            && resolution.height\n                            && resolution.width !== -1\n                            && resolution.height !== -1) {\n                        const userResolutions = resolutions[participantId] || {};\n\n                        userResolutions[ssrc] = resolution;\n                        resolutions[participantId] = userResolutions;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        const userFramerates = framerates[participantId] || {};\n\n                        userFramerates[ssrc] = ssrcStats.framerate;\n                        framerates[participantId] = userFramerates;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n\n                        const userCodecs = codecs[participantId] || {};\n\n                        userCodecs[ssrc] = codecDesc;\n                        codecs[participantId] = userCodecs;\n                    }\n                } else {\n                    logger.error(`No participant ID returned by ${track}`);\n                }\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getSsrcByTrackId(now.trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(track, callback) {\n    if (browser.isIosBrowser()) {\n        // On iOS browsers audio is lost if the audio input device is in use by another app\n        // https://bugs.webkit.org/show_bug.cgi?id=233473\n        // The culprit was using the AudioContext, so now we close the AudioContext during\n        // the track being muted, and re-instantiate it afterwards.\n        track.addEventListener(\n        JitsiTrackEvents.NO_DATA_FROM_SOURCE,\n\n        /**\n         * Closes AudioContext on no audio data, and enables it on data received again.\n         *\n         * @param {boolean} value - Whether we receive audio data or not.\n         */\n        async value => {\n            if (value) {\n                for (const localStat of Statistics.localStats) {\n                    localStat.stop();\n                }\n\n                await LocalStats.disconnectAudioContext();\n            } else {\n                LocalStats.connectAudioContext();\n                for (const localStat of Statistics.localStats) {\n                    localStat.start();\n                }\n            }\n        });\n    }\n\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    track.addEventListener(\n        JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n        () => {\n            Statistics.stopLocalStats(track);\n        });\n\n    const stream = track.getOriginalStream();\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(track) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    const stream = track.getOriginalStream();\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n    let confID = this.options.confID;\n\n    // confID - domain/tenant/roomName\n    // roomName - meeting name or breakout room ID\n    // For breakout rooms we change the conference ID used for callstats to use\n    // the room ID instead of the meeting name\n    if (!confID.endsWith(this.options.roomName)) {\n        confID = `${this.options.confID.slice(0, this.options.confID.lastIndexOf('/'))}/${this.options.roomName}`;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n * @param {boolean} silence - Whether the dominant speaker is silent or not.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid, silence) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid, silence);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    chatRoom.addListener(JitsiTrackEvents.TRACK_REMOVED, track => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n    chatRoom.addListener(XMPPEvents.ROOM_MAX_USERS_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n    chatRoom.addListener(XMPPEvents.MUC_DESTROYED, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n\n    // Room metadata.\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_METADATA_UPDATED,\n        JitsiConferenceEvents.METADATA_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous, silence) => {\n            if ((conference.lastDominantSpeaker !== dominant || conference.dominantSpeakerIsSilent !== silence)\n                    && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.dominantSpeakerIsSilent = silence;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous, silence);\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid, silence);\n                }\n                if (conference.lastDominantSpeaker !== dominant) {\n                    if (previous && previous.length) {\n                        const speakerList = previous.slice(0);\n\n                        // Add the dominant speaker to the top of the list (exclude self).\n                        if (conference.myUserId !== dominant) {\n                            speakerList.splice(0, 0, dominant);\n                        }\n\n                        // Trim the list to the top 5 speakers only.\n                        if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                            speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                        }\n                        conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                    }\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.VIDEO_SSRCS_REMAPPED, msg => {\n        const sess = this.conference.getActiveMediaSession();\n\n        sess.videoSsrcsRemapped(msg);\n    });\n\n    rtc.addListener(RTCEvents.AUDIO_SSRCS_REMAPPED, msg => {\n        const sess = this.conference.getActiveMediaSession();\n\n        sess.audioSsrcsRemapped(msg);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            if (audioMuted) {\n                conference.isMutedByFocus = true;\n            }\n\n            if (videoMuted) {\n                conference.isVideoMutedByFocus = true;\n            }\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=10000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return this._identity?.user?.['hidden-from-recorder'] === 'true';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid() {\n        return this._connectionJid;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid) {\n        this._connectionJid = newJid;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = JitsiConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        this._enabling && await this._enabling;\n\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n\n                    const d = new Deferred();\n\n                    d.setRejectTimeout(REQ_TIMEOUT);\n                    d.catch(() => {\n                        this._reqs.delete(uuid);\n                        olmData.pendingSessionUuid = undefined;\n                    });\n                    this._reqs.set(uuid, d);\n\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {Promise<ArrayBuffer>} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {Promise<CryptoKey>} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","import $ from 'jquery';\nimport { Strophe, b64_sha1 } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    NETWORK_INFO_EVENT,\n    default as NetworkInfo\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum JitsiTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $msg } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport { JITSI_MEET_MUC_TYPE } from './xmpp';\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling room metadata.\n */\nexport default class RoomMetadata {\n    room: any;\n    _metadata: any;\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n\n        this._metadata = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Sets metadata for the given key.\n     *\n     * @param {string} key - key under which the  metadata will be stored.\n     * @param {object} data - data to be stored.\n     */\n    setMetadata(key, data) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot set room metadata - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            key,\n            data\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Gets the stored metadata (all of it).\n     *\n     * @returns The stored metadata.\n     */\n    getMetadata() {\n        return this._metadata;\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.roomMetadataComponentAddress;\n    }\n\n    /**\n     * Handles a message with metadata updates.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        const { metadata } = payload;\n\n        if (!metadata || isEqual(this._metadata, metadata)) {\n            return;\n        }\n\n        this._metadata = metadata;\n        this.room.eventEmitter.emit(XMPPEvents.ROOM_METADATA_UPDATED, metadata);\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        message[JITSI_MEET_MUC_TYPE] = 'room_metadata';\n\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('room_metadata', {\n            room: this.room.roomjid,\n            xmlns: 'http://jitsi.org/jitmeet'\n        }, JSON.stringify(message)).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests, enableCallStats } = this.options.conference;\n    const callstatsDisabled = !callStatsID || !callStatsSecret || !enableCallStats\n\n        // Even though AppID and AppSecret may be specified, the integration\n        // of callstats.io may be disabled because of globally-disallowed\n        // requests to any third parties.\n        || disableThirdPartyRequests === true;\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport RoomMetadata from './RoomMetadata';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.roomMetadata = new RoomMetadata(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave(reason) {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({\n            to: this.myroomjid,\n            type: 'unavailable'\n        });\n\n        if (reason) {\n            pres.c('status').t(reason).up();\n        }\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n            const roomMetadataEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_jitsimetadata\"]>value');\n            const roomMetadataText = roomMetadataEl?.text();\n\n            if (roomMetadataText) {\n                try {\n                    this.roomMetadata._handleMessages(JSON.parse(roomMetadataText));\n                } catch (e) {\n                    logger.warn('Failed to set room metadata', e);\n                }\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                const tags = [ 'id', 'name', 'avatar' ];\n\n                if (this.options.hiddenFromRecorderFeatureEnabled) {\n                    tags.push('hidden-from-recorder');\n                }\n\n                for (const tag of tags) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     * @param reason the reason for leaving (optional).\n     */\n    onParticipantLeft(jid, skipEvents, reason) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid, reason);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            const reasonSelect = $(pres).find('>status');\n            let reason;\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            delete this.members[from];\n            this.onParticipantLeft(from, false, reason);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': Strophe.getBareJidFromJid(m.jid)\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * @returns {RoomMetadata}\n     */\n    getMetadataHandler() {\n        return this.roomMetadata;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave(reason) {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n        this.roomMetadata.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave(reason);\n        }));\n\n        return Promise.allSettled(promises);\n    }\n\n    /**\n     * Ends the conference for all participants.\n     */\n    end() {\n        if (this.breakoutRooms.isBreakoutRoom()) {\n            logger.warn('Cannot end conference: this is a breakout room.');\n\n            return;\n        }\n\n        // Send the end conference message.\n        const msg = $msg({ to: this.xmpp.endConferenceComponentAddress });\n\n        msg.c('end_conference').up();\n\n        this.xmpp.connection.send(msg);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     * @param {Object} options - Optional parameters.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure, options = {}) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources:\n                        options.desktopSharingSources || desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const setScreenSharingResolutionConstraints = browser.isChromiumBased()\n            && this.options?.testing?.setScreenSharingResolutionConstraints;\n        let video = {};\n\n        if (typeof desktopSharingFrameRate === 'object') {\n            video.frameRate = desktopSharingFrameRate;\n        }\n\n        // Capturing the screenshare at very high resolutions restricts the framerate. Therefore, skip this hack when\n        // the capture framerate is > 5 fps.\n        if (setScreenSharingResolutionConstraints && !(desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE)) {\n            // Set bogus resolution constraints to work around\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1056311\n            video.height = 99999;\n            video.width = 99999;\n        }\n\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        if (Object.keys(video).length === 0) {\n            video = true;\n        }\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n\n    /**\n     * Parse the \"videoType\" attribute encoded in a set of SSRC attributes (e.g.\n     * \"a=ssrc:1234 videoType:desktop\")\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseVideoTypeLine(ssrcLines) {\n        const s = ' videoType:';\n        const videoTypeLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(s) > 0);\n\n        return videoTypeLine?.substring(videoTypeLine.indexOf(s) + s.length);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","export default class ConnectionData {\r\n    static localConnectionType = 'init'; //TODO: set it to undefined instead of init prior to initialization\r\n    static remoteConnectionType = 'init'; //TODO: set it to undefined instead of init prior to initialization\r\n    \r\n    static getLocalConnectionType() {\r\n        return ConnectionData.localConnectionType;\r\n    }\r\n    \r\n    static setLocalConnectionType(type) {\r\n        ConnectionData.localConnectionType = type\r\n    }\r\n\r\n    static getRemoteConnectionType() {\r\n        return ConnectionData.remoteConnectionType;\r\n    }\r\n    \r\n    static setRemoteConnectionType(type) {\r\n        ConnectionData.remoteConnectionType = type\r\n    }\r\n    \r\n}","import $ from 'jquery';\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n//////////////\nimport ConnectionData from '../util/connectionData';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {MediaType} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n                    const videoType = SDPUtil.parseVideoTypeLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        videoType,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n////////////////////////\n            // Check for local connection type\n            let localConnectionType = ConnectionData.getLocalConnectionType();\n            let localBandwidth = undefined;\n            if(localConnectionType){\n                if(localConnectionType === 'wifi') {\n                    localBandwidth = 2000\n                }\n                else {\n                    localBandwidth = 600\n                }\n            }\n\n            if(localBandwidth){\n                const bandwidth = {value:localBandwidth, type:\"AS\"};\n                elem.c('bandwidth').t(bandwidth.value);\n                delete bandwidth.value;\n                elem.attrs(bandwidth);\n                elem.up(); // end of bandwidth\n            }\n////////////////////////\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n\n////////////////////\n    try {\n        if (logger) {\n            logger.error(`inytelog fromJingle output ${this.raw}`);\n        }\n        console.log('inytelog fromJingle output', this.raw);\n    }\n    catch (error) {\n        if (logger) {\n            logger.error(` inytelog fromJingle output ${this.raw}`);\n        }\n        console.log('inytelog fromJingle output', this.raw);\n    }\n};\n////////////////////\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n////////////////////////    \n    if(bandwidth.length){\n    //  sdp+= 'b=AS:1000\\r\\n';\n        let connectionType = ConnectionData.getLocalConnectionType();\n        let remoteBandwidthValue = bandwidth.text();\n\n        sdp+= `b=AS:${remoteBandwidthValue}\\r\\n`;\n        if(Number(remoteBandwidthValue) > 1000){\n            ConnectionData.setRemoteConnectionType('wifi')\n        }\n        else{\n            ConnectionData.setRemoteConnectionType('4g')\n        }\n    }\n//////////////////////\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join(';');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n            const videoType = SDPUtil.parseVideoTypeLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                videoType,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callbacks\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.map(fileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(results);\n *     }\n * });\n *\n * // Using Promises\n * async.map(fileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now an array of the file size in bytes for each file, e.g.\n *     // [ 1000, 2000, 3000]\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.map(fileList, getFileSizeInBytes);\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * //Using Callbacks\n * async.auto({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     if (err) {\n *         console.log('err = ', err);\n *     }\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * });\n *\n * //Using Promises\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }).then(results => {\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * }).catch(err => {\n *     console.log('err = ', err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.auto({\n *             get_data: function(callback) {\n *                 // async code to get some data\n *                 callback(null, 'data', 'converted to array');\n *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n *                 // once there is some data and the directory exists,\n *                 // write the data to a file in the directory\n *                 callback(null, 'filename');\n *             }],\n *             email_link: ['write_file', function(results, callback) {\n *                 // once the file is written let's email a link to it...\n *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *             }]\n *         });\n *         console.log('results = ', results);\n *         // results = {\n *         //     get_data: ['data', 'converted to array']\n *         //     make_folder; 'folder',\n *         //     write_file: 'filename'\n *         //     email_link: { file: 'filename', email: 'user@example.com' }\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\n\nfunction stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n        if (string[index] === '/' && string[index+1] === '/') {\n            // inline comment\n            let endIndex = string.indexOf('\\n', index);\n            index = (endIndex === -1) ? string.length : endIndex;\n        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n            // block comment\n            let endIndex = string.indexOf('*/', index);\n            if (endIndex !== -1) {\n                index = endIndex + 2;\n                endBlockComment = string.indexOf('*/', index);\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        } else {\n            stripped += string[index];\n            index++;\n        }\n    }\n    return stripped;\n}\n\nfunction parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n *\n * // asynchronous function that computes the file size in bytes\n * // file size is added to the memoized value, then returned\n * function getFileSizeInBytes(memo, file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, memo + stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.reduce(fileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // 6000\n *     // which is the sum of the file sizes of the three files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * let directoryList = ['dir1','dir2','dir3'];\n * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n *\n * // Using callbacks\n * async.concat(directoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *    }\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *        // [ Error: ENOENT: no such file or directory ]\n *        // since dir4 does not exist\n *    } else {\n *        console.log(results);\n *    }\n * });\n *\n * // Using Promises\n * async.concat(directoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n * }).catch(err => {\n *      console.log(err);\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n * }).catch(err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4 does not exist\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.concat(directoryList, fs.readdir);\n *         console.log(results);\n *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *     } catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n *         console.log(results);\n *     } catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4 does not exist\n *     }\n * }\n *\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // dir1/file1.txt\n *        // result now equals the first file in the list that exists\n *    }\n *);\n *\n * // Using Promises\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n * .then(result => {\n *     console.log(result);\n *     // dir1/file1.txt\n *     // result now equals the first file in the list that exists\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n *         console.log(result);\n *         // dir1/file1.txt\n *         // result now equals the file in the list that exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        /* istanbul ignore else */\n        if (typeof console === 'object') {\n            /* istanbul ignore else */\n            if (err) {\n                /* istanbul ignore else */\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) { /* istanbul ignore else */\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.every(fileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * });\n *\n * async.every(withMissingFileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * });\n *\n * // Using Promises\n * async.every(fileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.every(withMissingFileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.every(fileList, fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.every(withMissingFileList, fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since NOT every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.filter(files, fileExists, function(err, results) {\n *    if(err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *        // results is now an array of the existing files\n *    }\n * });\n *\n * // Using Promises\n * async.filter(files, fileExists)\n * .then(results => {\n *     console.log(results);\n *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *     // results is now an array of the existing files\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.filter(files, fileExists);\n *         console.log(results);\n *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *         // results is now an array of the existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const files = ['dir1/file1.txt','dir2','dir4']\n *\n * // asynchronous function that detects file type as none, file, or directory\n * function detectFile(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(null, 'none');\n *         }\n *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n *     });\n * }\n *\n * //Using callbacks\n * async.groupBy(files, detectFile, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *\t       console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n * });\n *\n * // Using Promises\n * async.groupBy(files, detectFile)\n * .then( result => {\n *     console.log(result);\n *     // {\n *     //     file: [ 'dir1/file1.txt' ],\n *     //     none: [ 'dir4' ],\n *     //     directory: [ 'dir2']\n *     // }\n *     // result is object containing the files grouped by type\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.groupBy(files, detectFile);\n *         console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whose\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file3.txt'\n * };\n *\n * const withMissingFileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file4.txt'\n * };\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, key, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n * });\n *\n * // Error handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.mapValues(fileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // result is now a map of file size in bytes for each file, e.g.\n *     // {\n *     //     f1: 1000,\n *     //     f2: 2000,\n *     //     f3: 3000\n *     // }\n * }).catch (err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch (err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/* istanbul ignore file */\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n *\n * //Using Callbacks\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.parallel([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two'] even though\n *         // the second function had a shorter timeout.\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n    var processingScheduled = false;\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.reject(fileList, fileExists, function(err, results) {\n *    // [ 'dir3/file6.txt' ]\n *    // results now equals an array of the non-existing files\n * });\n *\n * // Using Promises\n * async.reject(fileList, fileExists)\n * .then( results => {\n *     console.log(results);\n *     // [ 'dir3/file6.txt' ]\n *     // results now equals an array of the non-existing files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.reject(fileList, fileExists);\n *         console.log(results);\n *         // [ 'dir3/file6.txt' ]\n *         // results now equals an array of the non-existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // true\n *        // result is true since some file in the list exists\n *    }\n *);\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // false\n *        // result is false since none of the files exists\n *    }\n *);\n *\n * // Using Promises\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since some file in the list exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since none of the files exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since some file in the list exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since none of the files exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * // bigfile.txt is a file that is 251100 bytes in size\n * // mediumfile.txt is a file that is 11000 bytes in size\n * // smallfile.txt is a file that is 121 bytes in size\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) return callback(getFileSizeErr);\n *         callback(null, fileSize);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // descending order\n * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) {\n *             return callback(getFileSizeErr);\n *         }\n *         callback(null, fileSize * -1);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n *         }\n *     }\n * );\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *             // [ Error: ENOENT: no such file or directory ]\n *         } else {\n *             console.log(results);\n *         }\n *     }\n * );\n *\n * // Using Promises\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now the original array of files sorted by\n *     // file size (ascending by default), e.g.\n *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *         // results is now the original array of files sorted by\n *         // file size (ascending by default), e.g.\n *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * // Error handling\n * async () => {\n *     try {\n *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","import { getLogger } from '@jitsi/logger';\nimport { queue } from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals video max frame heights for its local sources.\n     */\n    REMOTE_SOURCE_CONSTRAINTS_CHANGED = 'media_session.REMOTE_SOURCE_CONSTRAINTS_CHANGED',\n\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED = 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build, $iq, Strophe } from 'strophe.js';\n\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * Add \"source\" element as a child of \"description\" element.\n * @param {Object} description The \"description\" element to add to.\n * @param {Object} s Contains properties of the source being added.\n * @param {Number} ssrc_ The SSRC.\n * @param {String} msid The \"msid\" attribute.\n */\nfunction _addSourceElement(description, s, ssrc_, msid) {\n\n    description.c('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: ssrc_,\n        name: s.source\n    })\n        .c('parameter', {\n            name: 'msid',\n            value: msid\n        })\n        .up()\n        .c('ssrc-info', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            owner: s.owner\n        })\n        .up()\n        .up();\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /**\n     * Parses the source-name and max frame height value of the 'content-modify' IQ when source-name signaling\n     * is enabled.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Object|null}\n     */\n    static parseSourceMaxFrameHeight(jingleContents) {\n        const receiverConstraints = [];\n        const sourceFrameHeightSel = jingleContents.find('>content[name=\"video\"]>source-frame-height');\n        let maxHeight, sourceName;\n\n        if (sourceFrameHeightSel.length) {\n            sourceFrameHeightSel.each((_, source) => {\n                sourceName = source.getAttribute('sourceName');\n                maxHeight = source.getAttribute('maxHeight');\n                receiverConstraints.push({\n                    maxHeight,\n                    sourceName\n                });\n            });\n\n            return receiverConstraints;\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Receiver constraints (max height) set by the application per remote source. Will be used for p2p connection\n         * in lieu of localRecvMaxFrameHeight when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>}\n         */\n        this._sourceReceiverConstraints = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * Number of remote video sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteVideoSources = 0;\n\n        /**\n         * Number of remote audio sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteAudioSources = 0;\n\n        /**\n         * Remote preference for the receive video max frame heights when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>|undefined}\n         */\n        this.remoteSourceMaxFrameHeights = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Remote preference for receive video max frame heights when source-name signaling is enabled.\n     *\n     * @returns {Map<string, number>|undefined}\n     */\n    getRemoteSourcesRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteSourceMaxFrameHeights;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                if (ssrcElement.hasAttribute('name')) {\n                    const sourceName = ssrcElement.getAttribute('name');\n\n                    this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                }\n            }\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner?.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send 'session-accept' in result.\n     *\n     * @param jingleOffer jQuery selector pointing to the jingle element of the offer IQ\n     * @param success callback called when we accept incoming session successfully and receive RESULT packet to\n     * 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept the incoming offer. 'error' argument\n     * can be used to log some details about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes. We allow the localTracks to optionally be passed in so that the addition of the\n     * local tracks and the processing of the initial offer can all be done atomically. We want to make sure that any\n     * other operations which originate in the XMPP Jingle messages related with this session to be executed with an\n     * assumption that the initial offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n\n                    // The first video track is added to the peerconnection and signaled as part of the session-accept.\n                    // Add secondary video tracks (that were already added to conference) to the peerconnection here.\n                    // This will happen when someone shares a secondary source to a two people call, the other user\n                    // leaves and joins the call again, a new peerconnection is created for p2p/jvb connection. At this\n                    // point, there are 2 video tracks which need to be signaled to the remote peer.\n                    const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n                    videoTracks.length && videoTracks.splice(0, 1);\n                    if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length) {\n                        this.addTracks(videoTracks);\n                    }\n                },\n                error => {\n                    failure(error);\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    this.peerconnection.processLocalSdpForTransceiverInfo(localTracks);\n\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer as the remote description.\n     *\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n\n        const workFunction = finishedCallback => {\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleAnswer);\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteDescription = new RTCSessionDescription({\n                type: 'answer',\n                sdp: newRemoteSdp.raw\n            });\n\n            this.peerconnection.setRemoteDescription(remoteDescription)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendContentModify();\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setAnswer task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setAnswer task failed: ${error}`);\n                } else {\n                    logger.debug(`${this} setAnswer task done`);\n                }\n            });\n    }\n\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at converting Strophe Jingle IQ into\n     * remote offer SDP. Once converted, setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     *\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we fail at any point during setRD,\n     * createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes (for the local track addition to be an atomic operation together with the\n     * offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n            const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n            const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n            let tracks = localTracks;\n\n            // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n            // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n            // renegotiation.\n            if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length > 1) {\n                tracks = [ ...audioTracks, videoTracks[0] ];\n            }\n            for (const track of tracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession = $(jingleOfferAnswerIq)\n                .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n\n            Promise.all(addTracks)\n                .then(() => this._responderRenegotiate(remoteDescription))\n                .then(() => {\n                    this.peerconnection.processLocalSdpForTransceiverInfo(tracks);\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                        // adjust the video media direction only in the local SDP and the Jingle contents direction\n                        // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                        // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                        // interested in receiving video content. Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive\n                                || this.localRecvMaxFrameHeight\n                                || this._sourceReceiverConstraints)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer for the first time, but not when offer\n                    // and it's fine since we're generating an answer now it will contain all our SSRCs.\n                    if (oldLocalSdp) {\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n            logger.info(`${this} sending content-modify, video senders: ${senders},`\n                + ` max frame height: ${maxFrameHeight}`);\n        }\n\n        if (typeof this._sourceReceiverConstraints !== 'undefined') {\n            this._sourceReceiverConstraints.forEach((maxHeight, sourceName) => {\n                sessionModify\n                    .c('source-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                    .attrs({\n                        sourceName,\n                        maxHeight\n                    });\n\n                sessionModify.up();\n                logger.info(`${this} sending content-modify for source-name: ${sourceName}, maxHeight: ${maxHeight}`);\n            });\n        }\n\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     * @param {Map<string, number>} sourceReceiverConstraints - The receiver constraints per source.\n     */\n    setReceiverVideoConstraint(maxFrameHeight, sourceReceiverConstraints) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`\n            + ` sourceReceiverConstraints: ${sourceReceiverConstraints}`);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._sourceReceiverConstraints = sourceReceiverConstraints;\n        } else {\n            this.localRecvMaxFrameHeight = maxFrameHeight;\n        }\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        if (FeatureFlags.isSsrcRewritingSupported() && this.peerconnection) {\n            this.peerconnection.getRemoteTracks().forEach(track => {\n                this.room.eventEmitter.emit(JitsiTrackEvents.TRACK_REMOVED, track);\n            });\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            let midFound = false;\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n                midFound = true;\n            });\n\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\n            // in the current remote description. Add a new m-line for this newly signaled source.\n            if (!midFound && this.isP2P && FeatureFlags.isSourceNameSignalingEnabled()) {\n                addSsrcInfo[name] = lines;\n            }\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Filter remapped SSRCs.\n     * Process owner change for existing SSRCs.\n     * Return new ones for further processing.\n     */\n    getNewSources(msg) {\n        const newSources = [];\n\n        for (const s of msg.mappedSources) {\n            if (this.peerconnection.addRemoteSsrc(s.ssrc)) {\n                logger.debug(`New SSRC ${s.ssrc}`);\n                newSources[newSources.length] = s;\n            } else {\n                const track = this.peerconnection.getTrackBySSRC(s.ssrc);\n\n                if (track) {\n                    logger.debug(`Existing SSRC ${s.ssrc}: new owner ${s.owner}. name=${s.source}`);\n\n                    if (s.videoType === 'CAMERA') {\n                        track._setVideoType('camera');\n                    } else if (s.videoType === 'DESKTOP') {\n                        track._setVideoType('desktop');\n                    }\n\n                    track.setNewSource(s.owner, s.source);\n                } else {\n                    logger.error(`Remapped SSRC ${s.ssrc} not found`);\n                }\n            }\n        }\n\n        return newSources;\n    }\n\n    /**\n     * Process SSRC remappings for video sources.\n     */\n    videoSsrcsRemapped(msg) {\n        const newSources = this.getNewSources(msg);\n\n        if (newSources.length > 0) {\n\n            let node = $build('content', {\n                xmlns: 'urn:xmpp:jingle:1',\n                name: 'video'\n            }).c('description', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: MediaType.VIDEO\n            });\n\n            for (const s of newSources) {\n                const idx = ++this.numRemoteVideoSources;\n                const msid = `remote-video-${idx} remote-video-${idx}`;\n\n                _addSourceElement(node, s, s.ssrc, msid);\n                if (s.rtx !== '-1') {\n                    _addSourceElement(node, s, s.rtx, msid);\n                    node.c('ssrc-group', {\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                        semantics: 'FID'\n                    })\n                        .c('source', {\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                            ssrc: s.ssrc\n                        })\n                        .up()\n                        .c('source', {\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                            ssrc: s.rtx\n                        })\n                        .up()\n                        .up();\n                }\n            }\n\n            node = node.up();\n\n            this._addOrRemoveRemoteStream(true /* add */, node.node);\n        }\n    }\n\n    /**\n     * Process SSRC remappings for audio sources.\n     */\n    audioSsrcsRemapped(msg) {\n        const newSources = this.getNewSources(msg);\n\n        if (newSources.length > 0) {\n\n            let node = $build('content', {\n                xmlns: 'urn:xmpp:jingle:1',\n                name: 'audio'\n            }).c('description', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: MediaType.AUDIO\n            });\n\n            for (const s of newSources) {\n                const idx = ++this.numRemoteAudioSources;\n                const msid = `remote-audio-${idx} remote-audio-${idx}`;\n\n                _addSourceElement(node, s, s.ssrc, msid);\n            }\n\n            node = node.up();\n\n            this._addOrRemoveRemoteStream(true /* add */, node.node);\n        }\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n\n            // Always initiate a sRD->cA->sLD cycle when a remote source is added or removed irrespective of whether\n            // the local endpoint is an initiator or responder. Fixes bugs on Chromium where decoders are not created\n            // when sLD->cO->sRD cycle is initiated for p2p cases when remote sources are received.\n            this._responderRenegotiate(remoteDescription).then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                let mid;\n\n                lines.forEach(line => {\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n\n                // Reject the m-line so that the browser removes the associated transceiver from the list of available\n                // transceivers. This will prevent the client from trying to re-use these inactive transceivers when\n                // additional video sources are added to the peerconnection.\n                if (mid > -1 && !this.isP2P && FeatureFlags.isMultiStreamSupportEnabled()) {\n                    const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\n\n                    remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\n                }\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\n        // the remote p2p peer when multi-stream support is enabled.\n        if (addSsrcInfo.length > remoteSdp.media.length\n            && FeatureFlags.isSourceNameSignalingEnabled()\n            && this.isP2P\n            && this.usesUnifiedPlan) {\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            remoteSdp = new SDP(remoteSdp.raw);\n        }\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!FeatureFlags.isMultiStreamSupportEnabled()\n            || !localTracks?.length\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const oldLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n            const recvOnlyTransceiver = this.peerconnection.peerconnection.getTransceivers()\n                    .find(t => t.receiver.track.kind === MediaType.VIDEO\n                        && t.direction === MediaDirection.RECVONLY\n                        && t.currentDirection === MediaDirection.RECVONLY);\n\n            // Add transceivers by adding a new mline in the remote description for each track. Do not create a new\n            // m-line if a recv-only transceiver exists in the p2p case. The new track will be attached to the\n            // existing one in that case.\n            for (const track of localTracks) {\n                if (!this.isP2P || !recvOnlyTransceiver) {\n                    remoteSdp.addMlineForNewLocalSource(track.getType());\n                }\n            }\n\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: remoteSdp.raw\n            });\n\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\n            this._responderRenegotiate(remoteDescription)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => {\n                    const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                    // Signal the new sources to the peer.\n                    this.notifyMySSRCUpdate(oldLocalSDP, newLocalSDP);\n                    finishedCallback();\n                })\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        // Set the source name of the new track.\n                        if (FeatureFlags.isSourceNameSignalingEnabled()\n                            && oldTrack\n                            && newTrack\n                            && oldTrack.isVideoTrack()) {\n                            newTrack.setSourceName(oldTrack.getSourceName());\n                        }\n\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings(newTrack);\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to the peerconnection associated with this session.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is added back to this session and\n     * renegotiation succeeds (if its warranted). Will be rejected with a <tt>string</tt> that provides some error\n     * details in case something goes wrong.\n     */\n    addTrackToPc(track) {\n        return this._addRemoveTrack(false /* add */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackFromPc(track) {\n        return this._addRemoveTrack(true /* remove */, track);\n    }\n\n    /**\n     * See {@link addTrackToPc} and {@link removeTrackFromPc}.\n     * @param {boolean} isRemove <tt>true</tt> for \"remove\" operation or <tt>false</tt> for \"add\" operation.\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrack(isRemove, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isRemove ? 'removeTrack' : 'addTrack';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(`Error:  tried ${operationName} track with no active peer connection`);\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isRemove\n                    ? tpc.removeTrackFromPc(track)\n                    : tpc.addTrackToPc(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. It checks if the sourceMaxFrameHeight (as requested by\n     * the p2p peer) or the senders attribute of the video content has changed and modifies the local video sources\n     * accordingly.\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n        const sourceMaxFrameHeights = JingleSessionPC.parseSourceMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (sourceMaxFrameHeights) {\n            this.remoteSourceMaxFrameHeights = sourceMaxFrameHeights;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED, this, sourceMaxFrameHeights);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(`${this} - failed to parse video \"senders\" attribute in \"content-modify\" action`);\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded() && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust the media direction.\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        if (!this.options.deploymentInfo) {\n            this.options.deploymentInfo = {};\n        }\n\n        // Cache of components used for certain features.\n        this._components = [];\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            logger.info('Source-name signaling is enabled');\n            this.caps.addFeature('http://jitsi.org/source-name');\n        }\n        if (FeatureFlags.isReceiveMultipleVideoStreamsSupported()) {\n            logger.info('Receiving multiple video streams is enabled');\n            this.caps.addFeature('http://jitsi.org/receive-multiple-video-streams');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n                this._components.push(this.avModerationComponentAddress);\n            }\n\n            if (identity.type === 'end_conference') {\n                this.endConferenceComponentAddress = identity.name;\n                this._components.push(this.endConferenceComponentAddress);\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n                this._components.push(this.speakerStatsComponentAddress);\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n                this._components.push(this.conferenceDurationComponentAddress);\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'release') {\n                this.options.deploymentInfo.backendRelease = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n                this._components.push(this.breakoutRoomsComponentAddress);\n            }\n\n            if (identity.type === 'room_metadata') {\n                this.roomMetadataComponentAddress = identity.name;\n                this._components.push(this.roomMetadataComponentAddress);\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this._components.length > 0) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {boolean} silence - Whether the dominant speaker is silent or not.\n     */\n    sendDominantSpeakerEvent(roomJid, silence) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            silence })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face expressions to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.faceExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this._components.includes(from)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'room_metadata') {\n            this.eventEmitter.emit(XMPPEvents.ROOM_METADATA_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            // Let's push to analytics any updates that may have come from the backend\n            Statistics.analytics.addPermanentProperties({ ...logObject });\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Send a new conference IQ.\n                        this.room.moderator.allocateConferenceFocus();\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        //const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n        const p2pCodec = CodecMimeType.VP8;\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [], silence } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers, silence);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending\n                    // video).\n                    const lastNEndpoints = obj.lastNEndpoints;\n\n                    logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                    emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n                }\n\n                break;\n            }\n            case 'ForwardedSources': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of forwarded sources\n                    const forwardedSources = obj.forwardedSources;\n\n                    logger.info(`New forwarded sources: ${forwardedSources}`);\n                    emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n                }\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    const { sourceName, maxHeight } = obj;\n\n                    if (typeof sourceName === 'string' && typeof maxHeight === 'number') {\n                        // eslint-disable-next-line object-property-newline\n                        logger.info(`SenderSourceConstraints: ${JSON.stringify({ sourceName, maxHeight })}`);\n                        emitter.emit(\n                            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, {\n                                sourceName,\n                                maxHeight\n                            }\n                        );\n                    } else {\n                        logger.error(`Invalid SenderSourceConstraints: ${JSON.stringify(obj)}`);\n                    }\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            case 'VideoSourcesMap': {\n                logger.info(`Received VideoSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.VIDEO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            case 'AudioSourcesMap': {\n                logger.info(`Received AudioSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.AUDIO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio', {direction: 'recvonly'});\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video', {direction: 'recvonly'});\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nexport function shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      let desc = arguments[0] || {};\n      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {\n        return nativeSetLocalDescription.apply(this, arguments);\n      }\n      // The remaining steps should technically happen when SLD comes off the\n      // RTCPeerConnection's operations chain (not ahead of going on it), but\n      // this is too difficult to shim. Instead, this shim only covers the\n      // common case where the operations chain is empty. This is imperfect, but\n      // should cover many cases. Rationale: Even if we can't reduce the glare\n      // window to zero on imperfect implementations, there's value in tapping\n      // into the perfect negotiation pattern that several browsers support.\n      desc = {type: desc.type, sdp: desc.sdp};\n      if (!desc.type) {\n        switch (this.signalingState) {\n          case 'stable':\n          case 'have-local-offer':\n          case 'have-remote-pranswer':\n            desc.type = 'offer';\n            break;\n          default:\n            desc.type = 'answer';\n            break;\n        }\n      }\n      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {\n        return nativeSetLocalDescription.apply(this, [desc]);\n      }\n      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n      return func.apply(this)\n        .then(d => nativeSetLocalDescription.apply(this, [d]));\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\nimport 'webrtc-adapter';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (!browser.isReactNative()) {\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n        }\n\n        this.pcConstraints = {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @param {Object} options - Optional parameters.\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia(options) {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                },\n                options);\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @param {Array<string>} options.desktopSharingSources - The types of sources (\"screen\", \"window\", etc)\n     * from which the user can select what to share.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia({ desktopSharingSources });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        return this.getStreamId();\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED, this),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType ?? displaySurface;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackToPc(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackFromPc(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSupportEnabled())\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    async dispose() {\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            await this.setEffect();\n        }\n\n        if (this.conference) {\n            await this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        return conference._removeLocalTrackFromPc(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference._addLocalTrackToPc(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                const bLine = clonedeep(mLine);\n\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    // Copy the msid attribute to each ssrc.\n                    bLine.sources.forEach(ssrc => {\n                        ssrc.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(bLine.sources);\n                }\n                if (typeof bLine.ssrcGroups !== 'undefined' && Array.isArray(bLine.ssrcGroups)) {\n                    media[type].ssrcGroups = (media[type].ssrcGroups || []).concat(bLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.lastIndexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * Extracts source index (zero based) from a given source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name, eg. endpointA-v0.\n * @returns {number}\n */\nexport function getSourceIndexFromSourceName(sourceName) {\n    const nameParts = sourceName.split('-');\n    const trackIdx = Number(nameParts[nameParts.length - 1].substring(1));\n\n    if (Number.isNaN(trackIdx)) {\n        throw new Error(`Failed to parse track idx for source name: ${sourceName}`);\n    }\n\n    return trackIdx;\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) { // eslint-disable-line no-unused-vars\n    }\n\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n        this.audioSourcesToMsidMap = new Map();\n        this.videoSourcesToMsidMap = new Map();\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\n     * preceding by a dash sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    let streamId = streamAndTrackIDs[0];\n                    const trackId = streamAndTrackIDs[1];\n\n                    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                        // Always overwrite streamId since we want the msid to be in this format even if the browser\n                        // generates one (in p2p mode).\n                        streamId = `${this.localEndpointId}-${mediaType}`;\n\n                        // eslint-disable-next-line max-depth\n                        if (mediaType === MediaType.VIDEO) {\n                            // eslint-disable-next-line max-depth\n                            if (!this.videoSourcesToMsidMap.has(trackId)) {\n                                streamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\n                                this.videoSourcesToMsidMap.set(trackId, streamId);\n                            }\n                        } else if (!this.audioSourcesToMsidMap.has(trackId)) {\n                            streamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\n                            this.audioSourcesToMsidMap.set(trackId, streamId);\n                        }\n\n                        streamId = mediaType === MediaType.VIDEO\n                            ? this.videoSourcesToMsidMap.get(trackId)\n                            : this.audioSourcesToMsidMap.get(trackId);\n                    }\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, streamId);\n                } else {\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        // On FF when the user has started muted create answer will generate a recv only SSRC. We don't want to signal\n        // this SSRC in order to reduce the load of the xmpp server for large calls. Therefore the SSRC needs to be\n        // removed from the SDP.\n        //\n        // For all other use cases (when the user has had media but then the user has stopped it) we want to keep the\n        // receive only SSRCs in the SDP. Otherwise source-remove will be triggered and the next time the user add a\n        // track we will reuse the SSRCs and send source-add with the same SSRCs. This is problematic because of issues\n        // on Chrome and FF (https://bugzilla.mozilla.org/show_bug.cgi?id=1768729) when removing and then adding the\n        // same SSRC in the remote sdp the remote track is not rendered.\n        if (browser.isFirefox()\n            && (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE)\n            && (\n                (mediaType === MediaType.VIDEO && !this.tpc._hasHadVideoTrack)\n                || (mediaType === MediaType.AUDIO && !this.tpc._hasHadAudioTrack)\n            )\n        ) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n        }\n\n        const msidLine = mediaSection.mLine?.msid;\n        const trackId = msidLine && msidLine.split(' ')[1];\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n        for (const source of sources) {\n            const msidExists = mediaSection.ssrcs\n                .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n            if (!msidExists && trackId) {\n                const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\n\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'msid',\n                    value: generatedMsid\n                });\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        // Plan-b clients generate new SSRCs and trackIds whenever tracks are removed and added back to the\n        // peerconnection, therefore local track based map for msids needs to be reset after every transformation.\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !this.tpc._usesUnifiedPlan) {\n            this.audioSourcesToMsidMap.clear();\n            this.videoSourcesToMsidMap.clear();\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid')?.value;\n            let trackIndex;\n\n            if (msid) {\n                const streamId = msid.split(' ')[0];\n\n                // Example stream id: d8ff91-video-8-1\n                // In the example above 8 is the track index\n                const trackIndexParts = streamId.split('-');\n\n                trackIndex = trackIndexParts[trackIndexParts.length - 2];\n            }\n\n            const sourceName = getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex);\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: sourceName\n                });\n            }\n\n            if (mediaType === MediaType.VIDEO) {\n                const videoType = this.tpc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                    ?.getVideoType();\n\n                if (videoType) {\n                    // Inject videoType as a=ssrc:1234 videoType:desktop.\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'videoType',\n                        value: videoType\n                    });\n                }\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { SdpTransformWrap, parseSecondarySSRC } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    SdpTransformWrap,\n    parsePrimarySSRC,\n    parseSecondarySSRC\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiConference from '../../types/hand-crafted/JitsiConference';\nimport JitsiRemoteTrack from '../../types/hand-crafted/modules/RTC/JitsiRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType, \n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: JitsiConference;\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: JitsiConference, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            // It's common for the event listeners to access the JitsiRemoteTrack. Thus pass it as a parameter here.\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, this.track, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set RTC mute timeout for: ${sourceName} of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._disposeTrackStreamingStatus();\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Update the properties when the track is remapped to another source.\n     *\n     * @param {string} owner The endpoint ID of the new owner.\n     * @param {string} name The new source name.\n     */\n    setNewSource(owner, name) {\n        this.ownerEndpointId = owner;\n        this._sourceName = name;\n        this.emit(JitsiTrackEvents.TRACK_OWNER_CHANGED, owner);\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n\n        // In some edge cases, both browser 'unmute' and bridge's forwarded sources events are received before a\n        // LargeVideoUpdate is scheduled for auto-pinning a new screenshare track. If there are no layout changes and\n        // no further track events are received for the SS track, a black tile will be displayed for screenshare on\n        // stage. Fire a TRACK_STREAMING_STATUS_CHANGED event if the media is already being received for the remote\n        // track to prevent this from happening.\n        !this._trackStreamingStatusImpl.isVideoTrackFrozen()\n            && this.rtc.eventEmitter.emit(\n                JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED,\n                this,\n                this._trackStreamingStatus);\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: {${this._getStatus()}}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (localVideoTrack.getVideoType() === VideoType.DESKTOP\n                && this.pc._capScreenshareBitrate\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n        const lowFpsScreenshare = localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && this.pc._capScreenshareBitrate\n            && !browser.isWebKitBased();\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = lowFpsScreenshare\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const localTracks = this.pc.getLocalTracks(mediaType);\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSupportEnabled()\n            && localTracks?.length\n            && !oldTrack\n            && newTrack\n            && !localTracks.find(t => t === newTrack);\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n\n                // Re-use any existing recvonly transceiver (if available) for p2p case.\n                && ((this.pc.isP2P && t.currentDirection === MediaDirection.RECVONLY)\n                    || (t.currentDirection === MediaDirection.INACTIVE && !t.stopped)));\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = getSourceIndexFromSourceName(sourceName);\n\n                if (this.pc.isP2P) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType)[trackIndex];\n                } else if (oldTrack) {\n                    const transceiverMid = this.pc._localTrackTransceiverMids.get(oldTrack.rtcId);\n\n                    transceiver = this.pc.peerconnection.getTransceivers().find(t => t.mid === transceiverMid);\n                } else if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                            .filter(t => t.receiver.track.kind === mediaType\n                                && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n        if (!transceiver) {\n            return Promise.reject(\n                new Error(`Replace track failed - no transceiver for old: ${oldTrack}, new: ${newTrack}`));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach(transceiver => {\n            if (active) {\n                const localTrackMids = Array.from(this.pc._localTrackTransceiverMids);\n\n                if (localTrackMids.find(mids => mids[1] === transceiver.mid)) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport {\n    getSourceIndexFromSourceName,\n    getSourceNameForJitsiTrack\n} from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n///////////////\nimport ConnectionData from '../util/connectionData';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The set of remote SSRCs seen so far.\n     * Distinguishes new SSRCs from those that have been remapped.\n     */\n    this.remoteSSRCs = new Set();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCPeerConnection(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    // We currently need these flags only for FF and that's why we are updating them only for unified plan.\n    if (this._usesUnifiedPlan) {\n        /**\n         * Indicates whether an audio track has ever been added to the peer connection.\n         */\n        this._hasHadAudioTrack = false;\n\n        /**\n         * Indicates whether a video track has ever been added to the peer connection.\n         */\n        this._hasHadVideoTrack = false;\n    }\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    /**\n     * Holds the RTCRtpTransceiver mids that the local tracks are attached to, mapped per their\n     * {@link JitsiLocalTrack.rtcId}.\n     * @type {Map<string, string>}\n     */\n    this._localTrackTransceiverMids = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the MID of the m-line associated with the local desktop track (if it exists).\n *\n * @returns {Number|null}\n */\nTraceablePeerConnection.prototype._getDesktopTrackMid = function() {\n    const desktopTrack = this.getLocalVideoTracks().find(track => track.getVideoType() === VideoType.DESKTOP);\n\n    if (desktopTrack) {\n        return Number(this._localTrackTransceiverMids.get(desktopTrack.rtcId));\n    }\n\n    return null;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {Array<JitsiLocalTrack>} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = stream.id;\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = stream.id;\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n        const existingTrack = Array.from(userTracksByMediaType)[0];\n\n        // The existing track needs to be removed here. This happens on Safari sometimes when an SSRC is removed from\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${stream.id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = stream.id;\n    const trackId = track?.id;\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId\n        && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unified-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        if (FeatureFlags.isMultiStreamSupportEnabled()) {\n            media = media.filter(mline => mline.direction === MediaDirection.SENDONLY\n                || mline.direction === MediaDirection.SENDRECV);\n        } else {\n            media = [];\n            [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n                const mLine = session.media.find(m => m.type === mediaType);\n\n                mLine && media.push(mLine);\n            });\n        }\n    }\n\n    let index = 0;\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined' && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan\n                ? FeatureFlags.isMultiStreamSupportEnabled() ? `${mLine.type}-${index}` : mLine.type\n                : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n\n        // Currently multi-stream is supported for video only.\n        mLine.type === MediaType.VIDEO && index++;\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs but no ssrc-groups on Firefox. Unfortunately, Jicofo\n * will complain if it sees ssrcs with matching msids but no ssrc-group, so a ssrc-group line is injected to make\n * Jicofo happy.\n *\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to contain an inject ssrc-group for simulcast.\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast = function(desc) {\n    const sdp = transform.parse(desc.sdp);\n    const video = sdp.media.find(mline => mline.type === 'video');\n\n    // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n    video.ssrcGroups = video.ssrcGroups || [];\n    const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n    if (video.simulcast || video.simulcast_03) {\n        const ssrcs = [];\n\n        if (fidGroups && fidGroups.length) {\n            fidGroups.forEach(group => {\n                ssrcs.push(group.ssrcs.split(' ')[0]);\n            });\n        } else {\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n        }\n        if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n            // Group already exists, no need to do anything\n            return desc;\n        }\n\n        // Add a SIM group for every 3 FID groups.\n        for (let i = 0; i < ssrcs.length; i += 3) {\n            const simSsrcs = ssrcs.slice(i, i + 3);\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: simSsrcs.join(' ')\n            });\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(sdp)\n    });\n};\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n//////////// \t\n//    if (!this.codecPreference) {\n//        logger.log(` inytelog mungecodecorder codecprefernce not set`);\n//        return description;\n//    }\n\n    if(this.isP2P){\n      logger.log(` inytelog mungecodecorder in customP2P`);\n      // set the local description to include the b=as parameter\n      const customParsedSDP = transform.parse(description.sdp);\n      const customMline = customParsedSDP.media.find(m => m.type === MediaType.VIDEO)\n      const customMlineaudio = customParsedSDP.media.find(m => m.type === MediaType.AUDIO)\n      if (!customMline) {\n        logger.log(` inytelog mungecodecorder custom m line not found`);\n          return description;\n      }\n      let limit = 600;\n      let localConnectionType = ConnectionData.getLocalConnectionType();\n      let remoteConnectionType = ConnectionData.getRemoteConnectionType();\n\n      if(localConnectionType === 'wifi' && remoteConnectionType === 'wifi'){\n          limit = 2000;\n      }\n\n      customMline.bandwidth = [ {\n          type: 'AS',\n          limit\n      } ];\n\n      customMlineaudio.bandwidth = [ {\n          type: 'AS',\n          limit\n      } ];\n      return new RTCSessionDescription({\n          type: description.type,\n          sdp: transform.write(customParsedSDP)\n      });\n    }else{\n      logger.log(` inytelog mungecodecorder in customJVB`);\n      // set the local description to include the b=as parameter\n      const customParsedSDP = transform.parse(description.sdp);\n      const customMline = customParsedSDP.media.find(m => m.type === MediaType.VIDEO)\n      const customMlineaudio = customParsedSDP.media.find(m => m.type === MediaType.AUDIO)\n      if (!customMline) {\n        logger.log(` inytelog mungecodecorder custom m line not found`);\n          return description;\n      }\n      let limit = 600;\n      let localConnectionType = ConnectionData.getLocalConnectionType();\n      if (localConnectionType) {\n          if (localConnectionType === \"wifi\") limit = 2000;\n          else limit = 600\n      }\n\n      customMline.bandwidth = [ {\n          type: 'AS',\n          limit\n      } ];\n\n      customMlineaudio.bandwidth = [ {\n          type: 'AS',\n          limit\n      } ];\n\n      return new RTCSessionDescription({\n          type: description.type,\n          sdp: transform.write(customParsedSDP)\n      });\n    }\n///////////////\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media.filter(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLines.length) {\n        return description;\n    }\n\n    for (const mLine of mLines) {\n        if (this.codecPreference.enable) {\n            SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n            // Strip the high profile H264 codecs on mobile clients for p2p connection. High profile codecs give better\n            // quality at the expense of higher load which we do not want on mobile clients. Jicofo offers only the\n            // baseline code for the jvb connection and therefore this is not needed for jvb connection.\n            // TODO - add check for mobile browsers once js-utils provides that check.\n            if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n                SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n            }\n        } else {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the track to be added to the pc.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackToPc = function(track) {\n    logger.info(`${this} Adding track=${track} to PC`);\n\n    if (!this._assertTrackBelongs('addTrackToPc', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} to PC - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => {\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackFromPc}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Processes the local description SDP and caches the mids of the mlines associated with the given tracks.\n *\n * @param {Array<JitsiLocalTrack>} localTracks - local tracks that are added to the peerconnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.processLocalSdpForTransceiverInfo = function(localTracks) {\n    const localSdp = this.peerconnection.localDescription?.sdp;\n\n    if (!localSdp) {\n        return;\n    }\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const tracks = localTracks.filter(t => t.getType() === mediaType);\n        const parsedSdp = transform.parse(localSdp);\n        const mLines = parsedSdp.media.filter(mline => mline.type === mediaType);\n\n        tracks.forEach((track, idx) => {\n            if (!this._localTrackTransceiverMids.has(track.rtcId)) {\n                this._localTrackTransceiverMids.set(track.rtcId, mLines[idx].mid.toString());\n            }\n        });\n    });\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n            .then(transceiver => {\n                if (oldTrack) {\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this._localTrackTransceiverMids.delete(oldTrack.rtcId);\n                }\n\n                if (newTrack) {\n                    if (newTrack.isAudioTrack()) {\n                        this._hasHadAudioTrack = true;\n                    } else {\n                        this._hasHadVideoTrack = true;\n                    }\n                    this._localTrackTransceiverMids.set(newTrack.rtcId, transceiver?.mid?.toString());\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n                }\n\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\n                // renegotiation is triggered as a result of this.\n                if (oldTrack && newTrack) {\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                    if (oldTrackSSRC) {\n                        this.localSSRCs.delete(oldTrack.rtcId);\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    }\n                }\n                const mediaActive = mediaType === MediaType.AUDIO\n                    ? this.audioTransferActive\n                    : this.videoTransferActive;\n\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\n                // this connection again.\n                if (transceiver && mediaActive) {\n                    // In the scenario where we remove the oldTrack (oldTrack is not null and newTrack is null) on FF\n                    // if we change the direction to RECVONLY, create answer will generate SDP with only 1 receive\n                    // only ssrc instead of keeping all 6 ssrcs that we currently have. Stopping the screen sharing\n                    // and then starting it again will trigger 2 rounds of source-remove and source-add replacing\n                    // the 6 ssrcs for the screen sharing with 1 receive only ssrc and then removing the receive\n                    // only ssrc and adding the same 6 ssrcs. On the remote participant's side the same ssrcs will\n                    // be reused on a new m-line and if the remote participant is FF due to\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1768729 the video stream won't be rendered.\n                    // That's why we need keep the direction to SENDRECV for FF.\n                    //\n                    // NOTE: If we return back to the approach of not removing the track for FF and instead using the\n                    // enabled property for mute or stopping screensharing we may need to change the direction to\n                    // RECVONLY if FF still sends the media even though the enabled flag is set to false.\n                    transceiver.direction\n                        = newTrack || browser.isFirefox() ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                } else if (transceiver) {\n                    transceiver.direction = MediaDirection.INACTIVE;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                return configureEncodingsPromise.then(() => this.isP2P);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track from the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} localTrack the local track to be removed.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackFromPc = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrack', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrack', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} from PC`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrack - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const localSources = this.getLocalTracks(mediaType).length;\n        const remoteSources = this.getRemoteTracks(null, mediaType).length;\n\n        media.forEach((mLine, idx) => {\n            if (localSources && localSources === remoteSources) {\n                mLine.direction = MediaDirection.SENDRECV;\n            } else if (!localSources && !remoteSources) {\n                mLine.direction = MediaDirection.INACTIVE;\n            } else if (!localSources) {\n                mLine.direction = MediaDirection.SENDONLY;\n            } else if (!remoteSources) {\n                mLine.direction = MediaDirection.RECVONLY;\n\n            // When there are 2 local sources and 1 remote source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'recvonly'.\n            } else if (localSources > remoteSources) {\n                mLine.direction = idx ? MediaDirection.RECVONLY : MediaDirection.SENDRECV;\n\n            // When there are 2 remote sources and 1 local source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'sendonly'.\n            } else {\n                mLine.direction = idx ? MediaDirection.SENDONLY : MediaDirection.SENDRECV;\n            }\n        });\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.enableOpusDtx && !audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            // On Firefox, the OpusDtx enablement has no effect\n            if (!browser.isFirefox() && audioQuality?.enableOpusDtx) {\n                fmtpConfig.usedtx = 1;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Munges the SDP to set all directions to inactive and drop all ssrc and ssrc-groups.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeInactive = function(description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        mLine.direction = MediaDirection.INACTIVE;\n        mLine.ssrcs = undefined;\n        mLine.ssrcGroups = undefined;\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n/**\n * Sets the max bitrates on the video m-lines when VP9 is the selected codec.\n *\n * @param {RTCSessionDescription} description - The local description that needs to be munged.\n * @param {boolean} isLocalSdp - Whether the max bitrate (via b=AS line in SDP) is set on local SDP.\n * @returns RTCSessionDescription\n */\nTraceablePeerConnection.prototype._setVp9MaxBitrates = function(description, isLocalSdp = false) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Find all the m-lines associated with the local sources.\n    const direction = isLocalSdp ? MediaDirection.RECVONLY : MediaDirection.SENDONLY;\n    const mLines = FeatureFlags.isMultiStreamSupportEnabled()\n        ? parsedSdp.media.filter(m => m.type === MediaType.VIDEO && m.direction !== direction)\n        : [ parsedSdp.media.find(m => m.type === MediaType.VIDEO) ];\n\n    for (const mLine of mLines) {\n        if (this.codecPreference.mimeType === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const mid = mLine.mid;\n            const isSharingScreen = FeatureFlags.isMultiStreamSupportEnabled()\n                ? mid === this._getDesktopTrackMid()\n                : this._isSharingScreen();\n            const limit = Math.floor((isSharingScreen ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        if (localVideoTrack) {\n            return this.setSenderVideoConstraints(\n                this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n                localVideoTrack);\n        }\n        const promises = [];\n\n        for (const track of this.getLocalVideoTracks()) {\n            promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n        }\n\n        return Promise.allSettled(promises);\n    }\n\n    let localTrack = localVideoTrack;\n\n    if (!localTrack) {\n        localTrack = this.getLocalVideoTracks()[0];\n    }\n\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight, localTrack);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    localDescription = this._mungeCodecOrder(localDescription);\n    localDescription = this._setVp9MaxBitrates(localDescription, true);\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n\n            if (FeatureFlags.isRunInLiteModeEnabled()) {\n                remoteDescription = this._mungeInactive(remoteDescription);\n            }\n        }\n        if (this.isSimulcastOn()) {\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    remoteDescription = this._setVp9MaxBitrates(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        const sourceName = localVideoTrack.getSourceName();\n\n        if (this._senderMaxHeights.get(sourceName) === frameHeight) {\n            return Promise.resolve();\n        }\n        this._senderMaxHeights.set(sourceName, frameHeight);\n    } else {\n        this._senderVideoMaxHeight = frameHeight;\n    }\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    const isSharingLowFpsScreen = localVideoTrack.getVideoType() === VideoType.DESKTOP && this._capScreenshareBitrate;\n\n    // Set the degradation preference.\n    const preference = isSharingLowFpsScreen\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || isSharingLowFpsScreen\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan)) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased()) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        let sourceIndex, sourceName;\n\n        if (FeatureFlags.isMultiStreamSupportEnabled()) {\n            sourceName = track.getSourceName();\n            sourceIndex = getSourceIndexFromSourceName(sourceName);\n        }\n\n        const sourceIdentifier = this._usesUnifiedPlan\n            ? FeatureFlags.isMultiStreamSupportEnabled()\n                ? `${track.getType()}-${sourceIndex}` : track.getType()\n            : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\n/**\n * Track the SSRCs seen so far.\n * @param {int} ssrc - SSRC.\n * @return {boolean} - Whether this is a new SSRC.\n */\nTraceablePeerConnection.prototype.addRemoteSsrc = function(ssrc) {\n    const existing = this.remoteSSRCs.has(ssrc);\n\n    if (!existing) {\n        this.remoteSSRCs.add(ssrc);\n    }\n\n    return !existing;\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {Array=} options.devices The devices that will be requested.\n     * @param {string=} options.resolution Resolution constraints.\n     * @param {string=} options.cameraDeviceId\n     * @param {string=} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            // Add forwarded sources change listener.\n            this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n        }\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n        const timestamp = Date.now();\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=`\n            + `${enteringForwardedSources} at ${timestamp}`);\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            timestamp);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(stream.id);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face_landmark';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACE_LANDMARK_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACE_LANDMARK_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { DETECTOR_STATE_CHANGE, VAD_SCORE_PUBLISHED } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_NOISY_DEVICE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_TALK_WHILE_MUTED } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                JitsiE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        /**\n         * The map that holds the max frame height requested for each remote source when source-name signaling is\n         * enabled.\n         *\n         * @type Map<string, number>\n         */\n        this._sourceReceiverConstraints = new Map();\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Returns a map of all the remote source names and the corresponding max frame heights.\n     *\n     * @param {number} maxFrameHeight\n     * @returns\n     */\n    _getDefaultSourceReceiverConstraints(mediaSession, maxFrameHeight) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return null;\n        }\n        const remoteVideoTracks = mediaSession.peerconnection?.getRemoteTracks(null, MediaType.VIDEO) || [];\n        const receiverConstraints = new Map();\n\n        for (const track of remoteVideoTracks) {\n            receiverConstraints.set(track.getSourceName(), maxFrameHeight);\n        }\n\n        return receiverConstraints;\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight, this._sourceReceiverConstraints);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                session.setReceiverVideoConstraint(\n                    maxFrameHeight,\n                    this._getDefaultSourceReceiverConstraints(this._maxFrameHeight));\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n        const isSourcesFormat = Object.keys(constraints).includes('onStageSources', 'selectedSources');\n\n        if (!FeatureFlags.isSourceNameSignalingEnabled() && isSourcesFormat) {\n            throw new Error(\n                '\"onStageSources\" and \"selectedSources\" are not supported when sourceNameSignaling is disabled.'\n            );\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled() && isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (!p2pSession) {\n                return;\n            }\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const mappedConstraints = Array.from(Object.entries(constraints.constraints))\n                    .map(constraint => {\n                        constraint[1] = constraint[1].maxHeight;\n\n                        return constraint;\n                    });\n\n                this._sourceReceiverConstraints = new Map(mappedConstraints);\n\n                // Send the receiver constraints to the peer through a \"content-modify\" message.\n                p2pSession.setReceiverVideoConstraint(null, this._sourceReceiverConstraints);\n            } else {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            for (const track of this._rtc.getLocalVideoTracks()) {\n                const sourceName = track.getSourceName();\n\n                sourceName && this._propagateSendMaxFrameHeight(sourceName);\n            }\n        } else {\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            mediaSession.addListener(\n                MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED,\n                (session, sourceConstraints) => {\n                    session === this._conference.getActiveMediaSession()\n                        && sourceConstraints.forEach(constraint => this._onSenderConstraintsReceived(constraint));\n                });\n        } else {\n            mediaSession.addListener(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n                session => session === this._conference.getActiveMediaSession()\n                    && this._configureConstraintsForLocalSources());\n        }\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const { maxHeight, sourceName } = videoConstraints;\n            const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n            for (const track of localVideoTracks) {\n                // Propagate the sender constraint only if it has changed.\n                if (track.getSourceName() === sourceName\n                    && (!this._sourceSenderConstraints.has(sourceName)\n                    || this._sourceSenderConstraints.get(sourceName) !== maxHeight)) {\n                    this._sourceSenderConstraints.set(\n                        sourceName,\n                        maxHeight === -1\n                            ? Math.min(MAX_LOCAL_RESOLUTION, this._preferredSendMaxFrameHeight)\n                            : maxHeight);\n                    logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                    this._propagateSendMaxFrameHeight(sourceName);\n                }\n            }\n        } else if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n            this._senderVideoConstraints = videoConstraints;\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? sourceName\n                    ? this._sourceSenderConstraints.get(sourceName)\n                    : activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : sourceName ? this._sourceSenderConstraints.get(sourceName) : this._senderVideoConstraints?.idealHeight\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const promises = [];\n\n            for (const sourceName of this._sourceSenderConstraints.keys()) {\n                promises.push(this._propagateSendMaxFrameHeight(sourceName));\n            }\n\n            return Promise.allSettled(promises);\n        }\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n        this._jibriJid = null;\n        this._statusFromJicofo = '';\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        // If _status is not set fallback to the status reported by jicofo.\n        if (this._status) {\n            return this._status;\n        }\n\n        return this._statusFromJicofo;\n    }\n\n    /**\n     * @returns {string|undefined} the JID of jibri associated with this session.\n     */\n    getJibriJid() {\n        return this._jibriJid;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Set the session status reported by jicofo. If a jibri is present in the room,\n     * the status is always 'on'. Otherwise, we fallback to the status reported by jicofo.\n     *\n     * @param {string} status\n     */\n    setStatusFromJicofo(status) {\n        this._statusFromJicofo = status;\n    }\n\n    /**\n     * Set the JID of the jibri associated with this session.\n     *\n     * @param {*} jibriJid\n     */\n    setJibriJid(jibriJid) {\n        this._jibriJid = jibriJid;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this.onMemberLeft = this.onMemberLeft.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.MUC_MEMBER_LEFT, this.onMemberLeft);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Find a session with a specific jibri JID.\n     *\n     * @param {string} jibriJid the JID to search for.\n     * @returns\n     */\n    getSessionByJibriJid(jibriJid) {\n        let s;\n\n        Object.values(this._sessions).forEach(session => {\n            if (session.getJibriJid() === jibriJid) {\n                s = session;\n            }\n        });\n\n        return s;\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Handle a participant leaving the room.\n     * @param {string} jid the JID of the participant that left.\n     */\n    onMemberLeft(jid) {\n        const session = this.getSessionByJibriJid(jid);\n\n        if (session) {\n\n            const prevStatus = session.getStatus();\n\n            // Setting to ''\n            session.setStatus('');\n            session.setJibriJid(null);\n\n            if (session.getStatus() !== prevStatus) {\n                this._emitSessionUpdate(session);\n            }\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatusFromJicofo(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, 'on', mode);\n        }\n\n        // When a jibri is present the status is always 'on';\n        session.setStatus('on');\n        session.setJibriJid(presence.getAttribute('from'));\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiConference} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue === 'undefined') {\n            return;\n        }\n\n        if (typeof nextValue !== 'number') {\n            logger.error(`${this.name} - invalid value for idx: ${this.count}`, nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.FACE_LANDMARK_ADDED,\n            this._onFaceLandmarkAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new dominant speaker.\n     * @param {Array[string]} previous - The array with previous speakers.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId, previous, silence) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true, silence);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data.faceExpression) {\n            savedUser.addFaceExpression(data.faceExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                    = newStats[userId].totalDominantSpeakerTime;\n\n                speakerStatsToUpdate.setFaceExpressions(newStats[userId].faceExpressions);\n            }\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.warn('Requested peer media info, before room was set');\n        };\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const lastPresence = this.chatRoom?.getLastPresence(owner);\n\n            if (!lastPresence) {\n                logger.warn(`getPeerMediaInfo - no presence stored for: ${owner}`);\n\n                return;\n            }\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            if (sourceName) {\n                return this.getPeerSourceInfo(owner, sourceName);\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: VideoType.CAMERA // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid)?.substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!mucNickname || !re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    // Do not initialize ParticipantConnectionStatusHandler when source-name signaling is enabled.\n    if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n        this.participantConnectionStatus.init();\n    }\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @param reason {string|undefined} The reason for leaving the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function(reason) {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave(reason);\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns <tt>true</tt> if end conference support is enabled in the backend.\n *\n * @returns {boolean} whether end conference is supported in the backend.\n */\nJitsiConference.prototype.isEndConferenceSupported = function() {\n    return Boolean(this.room && this.room.xmpp.endConferenceComponentAddress);\n};\n\n/**\n * Ends the conference.\n */\nJitsiConference.prototype.end = function() {\n    if (!this.isEndConferenceSupported()) {\n        logger.warn('Cannot end conference: is not supported.');\n\n        return;\n    }\n    if (!this.room) {\n        throw new Error('The conference has been already left');\n    }\n\n    this.room.end();\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localtrack) {\n        this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n    } else if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        // Currently, only adding multiple video streams of different video types is supported.\n        // TODO - remove this limitation once issues with jitsi-meet trying to add multiple camera streams is fixed.\n        if (FeatureFlags.isMultiStreamSupportEnabled()\n            && mediaType === MediaType.VIDEO\n            && !localTracks.find(t => t.getVideoType() === track.getVideoType())) {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            track.setSourceName(sourceName);\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track)\n        .then(() => {\n            // Presence needs to be sent here for desktop track since we need the presence to reach the remote peer\n            // before signaling so that a fake participant tile is created for screenshare. Otherwise, presence will\n            // only be sent after a session-accept or source-add is ack'ed.\n            if (track.getVideoType() === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled()) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n        });\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const mediaType = oldTrack?.getType() || newTrack?.getType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && newTrack) {\n        if (oldTrack) {\n            newTrack.setSourceName(oldTrack.getSourceName());\n        } else {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            newTrack.setSourceName(sourceName);\n        }\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n            this._updateRoomPresence(this.getActiveMediaSession());\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        const videoTypeTagName = 'videoType';\n\n        // If track is missing we revert to default type Camera, the case where we screenshare and\n        // we return to be video muted.\n        const trackVideoType = track ? track.videoType : VideoType.CAMERA;\n\n        // If video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            // We will not use this.sendCommand here to avoid sending the presence immediately, as later we may also\n            // set the mute status.\n            const legacyTypeChanged = this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\n\n            videoTypeChanged = videoTypeChanged || legacyTypeChanged;\n        }\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n    }\n\n    // Add the 'audioMuted' and 'videoMuted' tags when source name signaling is enabled for backward compatibility.\n    // It won't be used anymore when multiple stream support is enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteChanged, videoMuteChanged;\n\n        if (!this.room) {\n            return false;\n        }\n\n        if (mediaType === MediaType.AUDIO) {\n            audioMuteChanged = this.room.addAudioInfoToPresence(isMuted);\n        } else {\n            videoMuteChanged = this.room.addVideoInfoToPresence(isMuted);\n        }\n\n        presenceChanged = presenceChanged || audioMuteChanged || videoMuteChanged;\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to add the underlying MediaStream to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be added to the pc.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._addLocalTrackToPc = function(track) {\n    const addPromises = [];\n\n    if (this.jvbJingleSession) {\n        addPromises.push(this.jvbJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addPromises.push(this.p2pJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addPromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to remove the underlying MediaStream from the\n * RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._removeLocalTrackFromPc = function(track) {\n    const removePromises = [];\n\n    if (this.jvbJingleSession) {\n        removePromises.push(this.jvbJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removePromises.push(this.p2pJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid, reason) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    if (!FeatureFlags.isSsrcRewritingSupported()) {\n        const mediaSessions = this.getMediaSessions();\n        let tracksToBeRemoved = [];\n\n        for (const session of mediaSessions) {\n            const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n            remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n            // Remove the ssrcs from the remote description and renegotiate.\n            session.removeRemoteStreamsOnLeave(id);\n        }\n\n        // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n        tracksToBeRemoved.forEach(track => {\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n        });\n    }\n\n    const participant = this.participants[id];\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant, reason);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const usesUnifiedPlan = browser.supportsUnifiedPlan()\n        && (!browser.isChromiumBased() || (this.options.config.enableUnifiedOnChrome ?? true));\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (usesUnifiedPlan !== peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || browser.isFirefox()\n        || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options?.errorMsg) {\n        logger.warn(options.errorMsg);\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = jingleSession.peerconnection.getLocalTracks();\n    const localAudioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n    const localVideoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    // Set the presence in the legacy format if there are no local tracks and multi stream support is not enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteStatusChanged, videoMuteStatusChanged;\n\n        if (!localAudioTracks?.length) {\n            audioMuteStatusChanged = this._setTrackMuteStatus(MediaType.AUDIO, undefined, true);\n        }\n        if (!localVideoTracks?.length) {\n            videoMuteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\n            videoTypeChanged = this._setNewVideoType();\n        }\n\n        presenceChanged = presenceChanged || audioMuteStatusChanged || videoMuteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceExpressionEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n/**\n * Returns the metadata handler object.\n *\n * @returns {Object} the room metadata handler.\n */\nJitsiConference.prototype.getMetadataHandler = function() {\n    return this.room?.getMetadataHandler();\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(\n            (browser.isFirefox() && browser.isVersionLessThan('101'))\n            || browser.isIosBrowser()\n        );\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n\n                    Statistics.startLocalStats(track, track.setAudioLevel.bind(track));\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\n\nconst logger = getLogger(__filename);\n\n\n/**\n * Custom semi-mock implementation for the Proxy connection service.\n */\nexport default class CustomSignalingLayer extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams.\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        this.chatRoom = room;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        return {};\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport CustomSignalingLayer from './CustomSignalingLayer';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addEventListener: () => { /* no op */ },\n            addPresenceListener: () => { /* no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removeEventListener: () => { /* no op */ },\n            removePresenceListener: () => { /* no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new CustomSignalingLayer();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","import Logger from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n/////////////////////////////\nimport ConnectionData from './modules/util/connectionData';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes: any = {};\n\n    attributes['audio_requested'] = options.devices.includes('audio');\n    attributes['video_requested'] = options.devices.includes('video');\n    attributes['screen_sharing_requested'] = options.devices.includes('desktop');\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\ninterface ICreateLocalTrackOptions {\n    cameraDeviceId?: string;\n    devices?: any[];\n    firePermissionPromptIsShownEvent?: boolean;\n    fireSlowPromiseEvent?: boolean;\n    micDeviceId?: string;\n    resolution?: string;\n}\n\ninterface IJitsiMeetJSOptions {\n    enableAnalyticsLogging?: boolean;\n    enableUnifiedOnChrome?: boolean;\n    enableWindowOnErrorHandler?: boolean;\n    externalStorage?: Storage;\n    flags?: {\n        enableUnifiedOnChrome?: boolean;\n        receiveMultipleVideoStreams?: boolean;\n        runInLiteMode?: boolean;\n        sendMultipleVideoStreams?: boolean;\n        sourceNameSignaling?: boolean;\n        ssrcRewritingEnabled?: boolean;\n    }\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default {\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n///////////////////////////\n    getLocalConnectionData:ConnectionData.getLocalConnectionType,\n    setLocalConnectionData:ConnectionData.setLocalConnectionType,\n    getRemoteConnectionData:ConnectionData.getRemoteConnectionType,\n    setRemoteConnectionData:ConnectionData.setRemoteConnectionType,\n////////////////////////\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices as unknown,\n    analytics: Statistics.analytics as unknown,\n    init(options: IJitsiMeetJSOptions = {}) {\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n        const flags = options.flags || {};\n\n        // Multi-stream is supported only on endpoints running in Unified plan mode and the flag to disable unified\n        // plan also needs to be taken into consideration.\n        if (typeof options.enableUnifiedOnChrome !== 'undefined') {\n            flags.enableUnifiedOnChrome = options.enableUnifiedOnChrome;\n        }\n\n        // Configure the feature flags.\n        FeatureFlags.init(flags);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options: ICreateLocalTrackOptions = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            // @ts-ignore\n            JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN, browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(track,\n                                track.setAudioLevel.bind(track));\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n};\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","const ljm = require('./JitsiMeetJS').default;\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\nmodule.exports = _mergeNamespaceAndModule(ljm);\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._isDominantSpeaker = false;\n        this._isSilent = false;\n        this._hasLeft = false;\n        this._faceExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._isDominantSpeaker;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker, silence) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker && !silence) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker()) {\n            if (!isNowDominantSpeaker) {\n                if (!this._isSilent) {\n                    const now = Date.now();\n                    const timeElapsed = now - this._dominantSpeakerStart;\n\n                    this.totalDominantSpeakerTime += timeElapsed;\n                    this._dominantSpeakerStart = 0;\n                }\n            } else if (this._isSilent && !silence) {\n                this._dominantSpeakerStart = Date.now();\n            } else if (!this._isSilent && silence) {\n                const now = Date.now();\n                const timeElapsed = now - this._dominantSpeakerStart;\n\n                this.totalDominantSpeakerTime += timeElapsed;\n                this._dominantSpeakerStart = 0;\n            }\n        }\n\n        this._isDominantSpeaker = isNowDominantSpeaker;\n        this._isSilent = silence;\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker() && !this._isSilent) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the face expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFaceExpressions() {\n        return this._faceExpressions;\n    }\n\n    /**\n     * Sets the face expressions of the user.\n     *\n     * @param {Object} faceExpressions - object with face expressions.\n     * @returns {void}\n     */\n    setFaceExpressions(faceExpressions) {\n        this._faceExpressions = faceExpressions;\n    }\n\n    /**\n     * Adds a new face expression to speaker stats.\n     *\n     * @param  {string} faceExpression\n     * @param {number} duration\n     */\n    addFaceExpression(faceExpression, duration) {\n        this._faceExpressions[faceExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {boolean} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! jQuery v3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector | (c) OpenJS Foundation and other contributors | jquery.org/license */\n!function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(g,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,a=y.toString,l=a.call(Object),m={},b=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},w=g.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function C(e,t,n){var r,i,o=(n=n||w).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector\",E=function(e,t){return new E.fn.init(e,t)};function d(e){var t=!!e&&\"length\"in e&&e.length,n=T(e);return!b(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:f,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\"boolean\"==typeof a&&(l=a,a=arguments[s]||{},s++),\"object\"==typeof a||b(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],\"__proto__\"!==t&&a!==r&&(l&&r&&(E.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||E.isPlainObject(n)?n:{},i=!1,a[t]=E.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:\"jQuery\"+(f+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==o.call(e))&&(!(t=r(e))||\"function\"==typeof(n=y.call(t,\"constructor\")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){C(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?E.merge(n,\"string\"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return v(a)},guid:1,support:m}),\"function\"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(e,t){n[\"[object \"+t+\"]\"]=t.toLowerCase()});var p=function(n){var e,p,x,o,i,h,f,g,w,u,l,C,T,a,E,v,s,c,y,A=\"sizzle\"+1*new Date,d=n.document,N=0,r=0,m=ue(),b=ue(),S=ue(),k=ue(),D=function(e,t){return e===t&&(l=!0),0},L={}.hasOwnProperty,t=[],j=t.pop,q=t.push,O=t.push,P=t.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},I=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",R=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",B=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",M=\"\\\\[\"+R+\"*(\"+B+\")(?:\"+R+\"*([*^$|!~]?=)\"+R+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+B+\"))|)\"+R+\"*\\\\]\",W=\":(\"+B+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+M+\")*)|.*)\\\\)|)\",F=new RegExp(R+\"+\",\"g\"),$=new RegExp(\"^\"+R+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+R+\"+$\",\"g\"),z=new RegExp(\"^\"+R+\"*,\"+R+\"*\"),_=new RegExp(\"^\"+R+\"*([>+~]|\"+R+\")\"+R+\"*\"),U=new RegExp(R+\"|>\"),V=new RegExp(W),X=new RegExp(\"^\"+B+\"$\"),Q={ID:new RegExp(\"^#(\"+B+\")\"),CLASS:new RegExp(\"^\\\\.(\"+B+\")\"),TAG:new RegExp(\"^(\"+B+\"|[*])\"),ATTR:new RegExp(\"^\"+M),PSEUDO:new RegExp(\"^\"+W),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+R+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+R+\"*(?:([+-]|)\"+R+\"*(\\\\d+)|))\"+R+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+I+\")$\",\"i\"),needsContext:new RegExp(\"^\"+R+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+R+\"*((?:-\\\\d)?\\\\d*)\"+R+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,K=/^h\\d$/i,J=/^[^{]+\\{\\s*\\[native \\w/,Z=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ee=/[+~]/,te=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),ne=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,ie=function(e,t){return t?\"\\0\"===e?\"\\ufffd\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e},oe=function(){C()},ae=xe(function(e){return!0===e.disabled&&\"fieldset\"===e.nodeName.toLowerCase()},{dir:\"parentNode\",next:\"legend\"});try{O.apply(t=P.call(d.childNodes),d.childNodes),t[d.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){q.apply(e,P.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],\"string\"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&(C(e),e=e||T,E)){if(11!==d&&(u=Z.exec(t)))if(i=u[1]){if(9===d){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return O.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&p.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!k[t+\" \"]&&(!v||!v.test(t))&&(1!==d||\"object\"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===d&&(U.test(t)||_.test(t))){(f=ee.test(t)&&ye(e.parentNode)||e)===e&&p.scope||((s=e.getAttribute(\"id\"))?s=s.replace(re,ie):e.setAttribute(\"id\",s=A)),o=(l=h(t)).length;while(o--)l[o]=(s?\"#\"+s:\":scope\")+\" \"+be(l[o]);c=l.join(\",\")}try{return O.apply(n,f.querySelectorAll(c)),n}catch(e){k(t,!0)}finally{s===A&&e.removeAttribute(\"id\")}}}return g(t.replace($,\"$1\"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+\" \")>x.cacheLength&&delete e[r.shift()],e[t+\" \"]=n}}function le(e){return e[A]=!0,e}function ce(e){var t=T.createElement(\"fieldset\");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split(\"|\"),r=n.length;while(r--)x.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return\"input\"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return(\"input\"===t||\"button\"===t)&&e.type===n}}function ge(t){return function(e){return\"form\"in e?e.parentNode&&!1===e.disabled?\"label\"in e?\"label\"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:\"label\"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&\"undefined\"!=typeof e.getElementsByTagName&&e}for(e in p=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||\"HTML\")},C=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:d;return r!=T&&9===r.nodeType&&r.documentElement&&(a=(T=r).documentElement,E=!i(T),d!=T&&(n=T.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener(\"unload\",oe,!1):n.attachEvent&&n.attachEvent(\"onunload\",oe)),p.scope=ce(function(e){return a.appendChild(e).appendChild(T.createElement(\"div\")),\"undefined\"!=typeof e.querySelectorAll&&!e.querySelectorAll(\":scope fieldset div\").length}),p.attributes=ce(function(e){return e.className=\"i\",!e.getAttribute(\"className\")}),p.getElementsByTagName=ce(function(e){return e.appendChild(T.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),p.getElementsByClassName=J.test(T.getElementsByClassName),p.getById=ce(function(e){return a.appendChild(e).id=A,!T.getElementsByName||!T.getElementsByName(A).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute(\"id\")===t}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t=\"undefined\"!=typeof e.getAttributeNode&&e.getAttributeNode(\"id\");return t&&t.value===n}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return\"undefined\"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(\"undefined\"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(p.qsa=J.test(T.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML=\"<a id='\"+A+\"'></a><select id='\"+A+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",e.querySelectorAll(\"[msallowcapture^='']\").length&&v.push(\"[*^$]=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\"[selected]\").length||v.push(\"\\\\[\"+R+\"*(?:value|\"+I+\")\"),e.querySelectorAll(\"[id~=\"+A+\"-]\").length||v.push(\"~=\"),(t=T.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||v.push(\"\\\\[\"+R+\"*name\"+R+\"*=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":checked\").length||v.push(\":checked\"),e.querySelectorAll(\"a#\"+A+\"+*\").length||v.push(\".#.+[+~]\"),e.querySelectorAll(\"\\\\\\f\"),v.push(\"[\\\\r\\\\n\\\\f]\")}),ce(function(e){e.innerHTML=\"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";var t=T.createElement(\"input\");t.setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),e.querySelectorAll(\"[name=d]\").length&&v.push(\"name\"+R+\"*[*^$|!~]?=\"),2!==e.querySelectorAll(\":enabled\").length&&v.push(\":enabled\",\":disabled\"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&v.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),v.push(\",.*:\")})),(p.matchesSelector=J.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=c.call(e,\"*\"),c.call(e,\"[s!='']:x\"),s.push(\"!=\",W)}),v=v.length&&new RegExp(v.join(\"|\")),s=s.length&&new RegExp(s.join(\"|\")),t=J.test(a.compareDocumentPosition),y=t||J.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e==T||e.ownerDocument==d&&y(d,e)?-1:t==T||t.ownerDocument==d&&y(d,t)?1:u?H(u,e)-H(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==T?-1:t==T?1:i?-1:o?1:u?H(u,e)-H(u,t):0;if(i===o)return de(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?de(a[r],s[r]):a[r]==d?-1:s[r]==d?1:0}),T},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(C(e),p.matchesSelector&&E&&!k[t+\" \"]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){k(t,!0)}return 0<se(t,T,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=T&&C(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=T&&C(e);var n=x.attrHandle[t.toLowerCase()],r=n&&L.call(x.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:p.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+\"\").replace(re,ie)},se.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!p.detectDuplicates,u=!p.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(x=se.selectors={cacheLength:50,createPseudo:le,match:Q,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||\"\").replace(te,ne),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=m[e+\" \"];return t||(t=new RegExp(\"(^|\"+R+\")\"+e+\"(\"+R+\"|$)\"))&&m(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||\"undefined\"!=typeof e.getAttribute&&e.getAttribute(\"class\")||\"\")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?\"!=\"===r:!r||(t+=\"\",\"=\"===r?t===i:\"!=\"===r?t!==i:\"^=\"===r?i&&0===t.indexOf(i):\"*=\"===r?i&&-1<t.indexOf(i):\"$=\"===r?i&&t.slice(-i.length)===i:\"~=\"===r?-1<(\" \"+t.replace(F,\" \")+\" \").indexOf(i):\"|=\"===r&&(t===i||t.slice(0,i.length+1)===i+\"-\"))}},CHILD:function(h,e,t,g,v){var y=\"nth\"!==h.slice(0,3),m=\"last\"!==h.slice(-4),b=\"of-type\"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?\"nextSibling\":\"previousSibling\",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,p=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(b?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l=\"only\"===h&&!u&&\"nextSibling\"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&d){p=(s=(r=(i=(o=(a=c)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if(1===a.nodeType&&++p&&a===e){i[h]=[N,s,p];break}}else if(d&&(p=s=(r=(i=(o=(a=e)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1]),!1===p)while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if((b?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++p&&(d&&((i=(o=a[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[N,p]),a===e))break;return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||se.error(\"unsupported pseudo: \"+e);return a[A]?a(o):1<a.length?(t=[e,e,\"\",o],x.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=H(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace($,\"$1\"));return s[A]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return X.test(n||\"\")||se.error(\"unsupported lang: \"+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute(\"xml:lang\")||e.getAttribute(\"lang\"))return(t=t.toLowerCase())===n||0===t.indexOf(n+\"-\")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function me(){}function be(e){for(var t=0,n=e.length,r=\"\";t<n;t++)r+=e[t].value;return r}function xe(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&\"parentNode\"===c,d=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[N,d];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[A]||(e[A]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===N&&r[1]===d)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Ce(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(p,h,g,v,y,e){return v&&!v[A]&&(v=Te(v)),y&&!y[A]&&(y=Te(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||\"*\",n.nodeType?[n]:n,[]),f=!p||!e&&h?c:Ce(c,s,p,n,r),d=g?y||(e?p:l||v)?[]:t:f;if(g&&g(f,d,n,r),v){i=Ce(d,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(d[u[o]]=!(f[u[o]]=a))}if(e){if(y||p){if(y){i=[],o=d.length;while(o--)(a=d[o])&&i.push(f[o]=a);y(null,d=[],i,r)}o=d.length;while(o--)(a=d[o])&&-1<(i=y?H(e,a):s[o])&&(e[i]=!(t[i]=a))}}else d=Ce(d===t?d.splice(l,d.length):d),y?y(null,t,d,r):O.apply(t,d)})}function Ee(e){for(var i,t,n,r=e.length,o=x.relative[e[0].type],a=o||x.relative[\" \"],s=o?1:0,u=xe(function(e){return e===i},a,!0),l=xe(function(e){return-1<H(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=x.relative[e[s].type])c=[xe(we(c),t)];else{if((t=x.filter[e[s].type].apply(null,e[s].matches))[A]){for(n=++s;n<r;n++)if(x.relative[e[n].type])break;return Te(1<s&&we(c),1<s&&be(e.slice(0,s-1).concat({value:\" \"===e[s-2].type?\"*\":\"\"})).replace($,\"$1\"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&be(e))}c.push(t)}return we(c)}return me.prototype=x.filters=x.pseudos,x.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=b[e+\" \"];if(l)return t?0:l.slice(0);a=e,s=[],u=x.preFilter;while(a){for(o in n&&!(r=z.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=_.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace($,\" \")}),a=a.slice(n.length)),x.filter)!(r=Q[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):b(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,b,r,i=[],o=[],a=S[e+\" \"];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[A]?i.push(a):o.push(a);(a=S(e,(v=o,m=0<(y=i).length,b=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l=\"0\",c=e&&[],f=[],d=w,p=e||b&&x.find.TAG(\"*\",i),h=N+=null==d?1:Math.random()||.1,g=p.length;for(i&&(w=t==T||t||i);l!==g&&null!=(o=p[l]);l++){if(b&&o){a=0,t||o.ownerDocument==T||(C(o),n=!E);while(s=v[a++])if(s(o,t||T,n)){r.push(o);break}i&&(N=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=j.call(r));f=Ce(f)}O.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(N=h,w=d),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l=\"function\"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&\"ID\"===(a=o[0]).type&&9===t.nodeType&&E&&x.relative[o[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=Q.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],x.relative[s=a.type])break;if((u=x.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&be(o)))return O.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},p.sortStable=A.split(\"\").sort(D).join(\"\")===A,p.detectDuplicates=!!l,C(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(T.createElement(\"fieldset\"))}),ce(function(e){return e.innerHTML=\"<a href='#'></a>\",\"#\"===e.firstChild.getAttribute(\"href\")})||fe(\"type|href|height|width\",function(e,t,n){if(!n)return e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML=\"<input/>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")})||fe(\"value\",function(e,t,n){if(!n&&\"input\"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute(\"disabled\")})||fe(I,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(g);E.find=p,E.expr=p.selectors,E.expr[\":\"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;var h=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&E(e).is(n))break;r.push(e)}return r},A=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=E.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var k=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function D(e,n,r){return b(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?E.grep(e,function(e){return e===n!==r}):\"string\"!=typeof n?E.grep(e,function(e){return-1<i.call(n,e)!==r}):E.filter(n,e,r)}E.filter=function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(\"string\"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,i[t],n);return 1<r?E.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,\"string\"==typeof e&&N.test(e)?E(e):e||[],!1).length}});var L,j=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(E.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||L,\"string\"==typeof e){if(!(r=\"<\"===e[0]&&\">\"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),k.test(r[1])&&E.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=w.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,L=E(w);var q=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a=\"string\"!=typeof e&&E(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?E.uniqueSort(o):o)},index:function(e){return e?\"string\"==typeof e?i.call(E(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,\"parentNode\")},parentsUntil:function(e,t,n){return h(e,\"parentNode\",n)},next:function(e){return P(e,\"nextSibling\")},prev:function(e){return P(e,\"previousSibling\")},nextAll:function(e){return h(e,\"nextSibling\")},prevAll:function(e){return h(e,\"previousSibling\")},nextUntil:function(e,t,n){return h(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return h(e,\"previousSibling\",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(S(e,\"template\")&&(e=e.content||e),E.merge([],e.childNodes))}},function(r,i){E.fn[r]=function(e,t){var n=E.map(this,i,e);return\"Until\"!==r.slice(-5)&&(t=e),t&&\"string\"==typeof t&&(n=E.filter(t,n)),1<this.length&&(O[r]||E.uniqueSort(n),q.test(r)&&n.reverse()),this.pushStack(n)}});var H=/[^\\x20\\t\\r\\n\\f]+/g;function I(e){return e}function R(e){throw e}function B(e,t,n,r){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(r){var e,n;r=\"string\"==typeof r?(e=r,n={},E.each(e.match(H)||[],function(e,t){n[t]=!0}),n):E.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:\"\")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){E.each(e,function(e,t){b(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&\"string\"!==T(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return E.each(arguments,function(e,t){var n;while(-1<(n=E.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<E.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t=\"\",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=\"\"),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},E.extend({Deferred:function(e){var o=[[\"notify\",\"progress\",E.Callbacks(\"memory\"),E.Callbacks(\"memory\"),2],[\"resolve\",\"done\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),1,\"rejected\"]],i=\"pending\",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},\"catch\":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return E.Deferred(function(r){E.each(o,function(e,t){var n=b(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+\"With\"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError(\"Thenable self-resolution\");t=e&&(\"object\"==typeof e||\"function\"==typeof e)&&e.then,b(t)?s?t.call(e,l(u,o,I,s),l(u,o,R,s)):(u++,t.call(e,l(u,o,I,s),l(u,o,R,s),l(u,o,I,o.notifyWith))):(a!==I&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==R&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),g.setTimeout(t))}}return E.Deferred(function(e){o[0][3].add(l(0,e,b(r)?r:I,e.notifyWith)),o[1][3].add(l(0,e,b(t)?t:I)),o[2][3].add(l(0,e,b(n)?n:R))}).promise()},promise:function(e){return null!=e?E.extend(e,a):a}},s={};return E.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+\"With\"](this===s?void 0:this,arguments),this},s[t[0]+\"With\"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=E.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(B(e,o.done(a(t)).resolve,o.reject,!n),\"pending\"===o.state()||b(i[t]&&i[t].then)))return o.then();while(t--)B(i[t],a(t),o.reject);return o.promise()}});var M=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){g.console&&g.console.warn&&e&&M.test(e.name)&&g.console.warn(\"jQuery.Deferred exception: \"+e.message,e.stack,t)},E.readyException=function(e){g.setTimeout(function(){throw e})};var W=E.Deferred();function F(){w.removeEventListener(\"DOMContentLoaded\",F),g.removeEventListener(\"load\",F),E.ready()}E.fn.ready=function(e){return W.then(e)[\"catch\"](function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||W.resolveWith(w,[E])}}),E.ready.then=W.then,\"complete\"===w.readyState||\"loading\"!==w.readyState&&!w.documentElement.doScroll?g.setTimeout(E.ready):(w.addEventListener(\"DOMContentLoaded\",F),g.addEventListener(\"load\",F));var $=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if(\"object\"===T(n))for(s in i=!0,n)$(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,b(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(E(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,_=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function V(e){return e.replace(z,\"ms-\").replace(_,U)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=E.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if(\"string\"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(H)||[]).length;while(n--)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var Y=new Q,G=new Q,K=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,J=/[A-Z]/g;function Z(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r=\"data-\"+t.replace(J,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(r))){try{n=\"true\"===(i=n)||\"false\"!==i&&(\"null\"===i?null:i===+i+\"\"?+i:K.test(i)?JSON.parse(i):i)}catch(e){}G.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return G.hasData(e)||Y.hasData(e)},data:function(e,t,n){return G.access(e,t,n)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=G.get(o),1===o.nodeType&&!Y.get(o,\"hasDataAttrs\"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf(\"data-\")&&(r=V(r.slice(5)),Z(o,r,i[r]));Y.set(o,\"hasDataAttrs\",!0)}return i}return\"object\"==typeof n?this.each(function(){G.set(this,n)}):$(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=G.get(o,n))?t:void 0!==(t=Z(o,n))?t:void 0;this.each(function(){G.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){G.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=E.queue(e,t),r=n.length,i=n.shift(),o=E._queueHooks(e,t);\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,function(){E.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return Y.get(e,n)||Y.access(e,n,{empty:E.Callbacks(\"once memory\").add(function(){Y.remove(e,[t+\"queue\",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return\"string\"!=typeof t&&(n=t,t=\"fx\",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),\"fx\"===t&&\"inprogress\"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=E.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";while(a--)(n=Y.get(o[a],e+\"queueHooks\"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ee=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,te=new RegExp(\"^(?:([+-])=|)(\"+ee+\")([a-z%]*)$\",\"i\"),ne=[\"Top\",\"Right\",\"Bottom\",\"Left\"],re=w.documentElement,ie=function(e){return E.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&ie(e)&&\"none\"===E.css(e,\"display\")};var se={};function ue(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?(\"none\"===n&&(l[c]=Y.get(r,\"display\")||null,l[c]||(r.style.display=\"\")),\"\"===r.style.display&&ae(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=se[s])||(o=a.body.appendChild(a.createElement(s)),u=E.css(o,\"display\"),o.parentNode.removeChild(o),\"none\"===u&&(u=\"block\"),se[s]=u)))):\"none\"!==n&&(l[c]=\"none\",Y.set(r,\"display\",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}E.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var le,ce,fe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,pe=/^$|^module$|\\/(?:java|ecma)script/i;le=w.createDocumentFragment().appendChild(w.createElement(\"div\")),(ce=w.createElement(\"input\")).setAttribute(\"type\",\"radio\"),ce.setAttribute(\"checked\",\"checked\"),ce.setAttribute(\"name\",\"t\"),le.appendChild(ce),m.checkClone=le.cloneNode(!0).cloneNode(!0).lastChild.checked,le.innerHTML=\"<textarea>x</textarea>\",m.noCloneChecked=!!le.cloneNode(!0).lastChild.defaultValue,le.innerHTML=\"<option></option>\",m.option=!!le.lastChild;var he={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function ge(e,t){var n;return n=\"undefined\"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):\"undefined\"!=typeof e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&S(e,t)?E.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],\"globalEval\",!t||Y.get(t[n],\"globalEval\"))}he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td,m.option||(he.optgroup=he.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var ye=/<|&#?\\w+;/;function me(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if(\"object\"===T(o))E.merge(d,o.nodeType?[o]:o);else if(ye.test(o)){a=a||f.appendChild(t.createElement(\"div\")),s=(de.exec(o)||[\"\",\"\"])[1].toLowerCase(),u=he[s]||he._default,a.innerHTML=u[1]+E.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;E.merge(d,a.childNodes),(a=f.firstChild).textContent=\"\"}else d.push(t.createTextNode(o));f.textContent=\"\",p=0;while(o=d[p++])if(r&&-1<E.inArray(o,r))i&&i.push(o);else if(l=ie(o),a=ge(f.appendChild(o),\"script\"),l&&ve(a),n){c=0;while(o=a[c++])pe.test(o.type||\"\")&&n.push(o)}return f}var be=/^([^.]*)(?:\\.(.+)|)/;function xe(){return!0}function we(){return!1}function Ce(e,t){return e===function(){try{return w.activeElement}catch(e){}}()==(\"focus\"===t)}function Te(e,t,n,r,i,o){var a,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&(\"string\"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=we;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,i,r,n)})}function Ee(e,i,o){o?(Y.set(e,i,!1),E.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(E.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(Y.set(this,i,{value:E.event.trigger(E.extend(r[0],E.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&E.event.add(e,i,xe)}E.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.get(t);if(X(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&E.find.matchesSelector(re,i),n.guid||(n.guid=E.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return\"undefined\"!=typeof E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||\"\").match(H)||[\"\"]).length;while(l--)p=g=(s=be.exec(e[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p&&(f=E.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},c=E.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:h.join(\".\")},o),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),E.event.global[p]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.hasData(e)&&Y.get(e);if(v&&(u=v.events)){l=(t=(t||\"\").match(H)||[\"\"]).length;while(l--)if(p=g=(s=be.exec(t[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p){f=E.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),a=o=d.length;while(o--)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||E.removeEvent(e,p,v.handle),delete u[p])}else for(p in u)E.event.remove(e,p+t[l],n,r,!0);E.isEmptyObject(u)&&Y.remove(e,\"handle events\")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=E.event.fix(e),l=(Y.get(this,\"events\")||Object.create(null))[u.type]||[],c=E.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=E.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((E.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!(\"click\"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(\"click\"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+\" \"]&&(a[i]=r.needsContext?-1<E(i,this).index(l):E.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\",xe),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Y.get(t,\"click\")||S(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:we,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:we,isPropagationStopped:we,isImmediatePropagationStopped:we,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,\"char\":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:\"focusin\",blur:\"focusout\"},function(t,e){E.event.special[t]={setup:function(){return Ee(this,t,Ce),!1},trigger:function(){return Ee(this,t),!0},_default:function(e){return Y.get(e.target,t)},delegateType:e}}),E.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(e,i){E.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),E.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=we),this.each(function(){E.event.remove(this,e,n,t)})}});var Ae=/<script|<style|<link/i,Ne=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Se=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function ke(e,t){return S(e,\"table\")&&S(11!==t.nodeType?t:t.firstChild,\"tr\")&&E(e).children(\"tbody\")[0]||e}function De(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function Le(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function je(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(i in Y.remove(t,\"handle events\"),s)for(n=0,r=s[i].length;n<r;n++)E.event.add(t,i,s[i][n]);G.hasData(e)&&(o=G.access(e),a=E.extend({},o),G.set(t,a))}}function qe(n,r,i,o){r=v(r);var e,t,a,s,u,l,c=0,f=n.length,d=f-1,p=r[0],h=b(p);if(h||1<f&&\"string\"==typeof p&&!m.checkClone&&Ne.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),qe(t,r,i,o)});if(f&&(t=(e=me(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=E.map(ge(e,\"script\"),De)).length;c<f;c++)u=e,c!==d&&(u=E.clone(u,!0,!0),s&&E.merge(a,ge(u,\"script\"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,E.map(a,Le),c=0;c<s;c++)u=a[c],pe.test(u.type||\"\")&&!Y.access(u,\"globalEval\")&&E.contains(l,u)&&(u.src&&\"module\"!==(u.type||\"\").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute(\"nonce\")},l):C(u.textContent.replace(Se,\"\"),u,l))}return n}function Oe(e,t,n){for(var r,i=t?E.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||E.cleanData(ge(r)),r.parentNode&&(n&&ie(r)&&ve(ge(r,\"script\")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=ie(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=ge(c),r=0,i=(o=ge(e)).length;r<i;r++)s=o[r],u=a[r],void 0,\"input\"===(l=u.nodeName.toLowerCase())&&fe.test(s.type)?u.checked=s.checked:\"input\"!==l&&\"textarea\"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(c),r=0,i=o.length;r<i;r++)je(o[r],a[r]);else je(e,c);return 0<(a=ge(c,\"script\")).length&&ve(a,!f&&ge(e,\"script\")),c},cleanData:function(e){for(var t,n,r,i=E.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[G.expando]&&(n[G.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return $(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return qe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ke(this,e).appendChild(e)})},prepend:function(){return qe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ke(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!Ae.test(e)&&!he[(de.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return qe(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ge(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,a){E.fn[e]=function(e){for(var t,n=[],r=E(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),E(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var Pe=new RegExp(\"^(\"+ee+\")(?!px)[a-z%]+$\",\"i\"),He=/^--/,Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=g),t.getComputedStyle(e)},Re=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Be=new RegExp(ne.join(\"|\"),\"i\"),Me=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",We=new RegExp(\"^\"+Me+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+Me+\"+$\",\"g\");function Fe(e,t,n){var r,i,o,a,s=He.test(t),u=e.style;return(n=n||Ie(e))&&(a=n.getPropertyValue(t)||n[t],s&&(a=a.replace(We,\"$1\")),\"\"!==a||ie(e)||(a=E.style(e,t)),!m.pixelBoxStyles()&&Pe.test(a)&&Be.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+\"\":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",re.appendChild(u).appendChild(l);var e=g.getComputedStyle(l);n=\"1%\"!==e.top,s=12===t(e.marginLeft),l.style.right=\"60%\",o=36===t(e.right),r=36===t(e.width),l.style.position=\"absolute\",i=12===t(l.offsetWidth/3),re.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=w.createElement(\"div\"),l=w.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",m.clearCloneStyle=\"content-box\"===l.style.backgroundClip,E.extend(m,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=w.createElement(\"table\"),t=w.createElement(\"tr\"),n=w.createElement(\"div\"),e.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",t.style.cssText=\"border:1px solid\",t.style.height=\"1px\",n.style.height=\"9px\",n.style.display=\"block\",re.appendChild(e).appendChild(t).appendChild(n),r=g.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,re.removeChild(e)),a}}))}();var ze=[\"Webkit\",\"Moz\",\"ms\"],_e=w.createElement(\"div\").style,Ue={};function Ve(e){var t=E.cssProps[e]||Ue[e];return t||(e in _e?e:Ue[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=ze.length;while(n--)if((e=ze[n]+t)in _e)return e}(e)||e)}var Xe,Qe,Ye=/^(none|table(?!-c[ea]).+)/,Ge={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Ke={letterSpacing:\"0\",fontWeight:\"400\"};function Je(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||\"px\"):t}function Ze(e,t,n,r,i,o){var a=\"width\"===t?1:0,s=0,u=0;if(n===(r?\"border\":\"content\"))return 0;for(;a<4;a+=2)\"margin\"===n&&(u+=E.css(e,n+ne[a],!0,i)),r?(\"content\"===n&&(u-=E.css(e,\"padding\"+ne[a],!0,i)),\"margin\"!==n&&(u-=E.css(e,\"border\"+ne[a]+\"Width\",!0,i))):(u+=E.css(e,\"padding\"+ne[a],!0,i),\"padding\"!==n?u+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i):s+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function et(e,t,n){var r=Ie(e),i=(!m.boxSizingReliable()||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,r),o=i,a=Fe(e,t,r),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if(Pe.test(a)){if(!n)return a;a=\"auto\"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&S(e,\"tr\")||\"auto\"===a||!parseFloat(a)&&\"inline\"===E.css(e,\"display\",!1,r))&&e.getClientRects().length&&(i=\"border-box\"===E.css(e,\"boxSizing\",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+Ze(e,t,n||(i?\"border\":\"content\"),o,r,a)+\"px\"}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=He.test(t),l=e.style;if(u||(t=Ve(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&\"get\"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];\"string\"===(o=typeof n)&&(i=te.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return E.css(e,t,\"\")},u=s(),l=n&&n[3]||(E.cssNumber[t]?\"\":\"px\"),c=e.nodeType&&(E.cssNumber[t]||\"px\"!==l&&+u)&&te.exec(E.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)E.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,E.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}(e,t,i),o=\"number\"),null!=n&&n==n&&(\"number\"!==o||u||(n+=i&&i[3]||(E.cssNumber[s]?\"\":\"px\")),m.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(l[t]=\"inherit\"),a&&\"set\"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return He.test(t)||(t=Ve(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&\"get\"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),\"normal\"===i&&t in Ke&&(i=Ke[t]),\"\"===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),E.each([\"height\",\"width\"],function(e,u){E.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(E.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,u,n):Re(e,Ge,function(){return et(e,u,n)})},set:function(e,t,n){var r,i=Ie(e),o=!m.scrollboxSize()&&\"absolute\"===i.position,a=(o||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,i),s=n?Ze(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e[\"offset\"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-Ze(e,u,\"border\",!1,i)-.5)),s&&(r=te.exec(t))&&\"px\"!==(r[3]||\"px\")&&(e.style[u]=t,t=E.css(e,u)),Je(0,t,s)}}}),E.cssHooks.marginLeft=$e(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,\"marginLeft\"))||e.getBoundingClientRect().left-Re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+\"px\"}),E.each({margin:\"\",padding:\"\",border:\"Width\"},function(i,o){E.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r=\"string\"==typeof e?e.split(\" \"):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},\"margin\"!==i&&(E.cssHooks[i+o].set=Je)}),E.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ie(e),i=t.length;a<i;a++)o[t[a]]=E.css(e,t[a],!1,r);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),E.fn.delay=function(r,e){return r=E.fx&&E.fx.speeds[r]||r,e=e||\"fx\",this.queue(e,function(e,t){var n=g.setTimeout(e,r);t.stop=function(){g.clearTimeout(n)}})},Xe=w.createElement(\"input\"),Qe=w.createElement(\"select\").appendChild(w.createElement(\"option\")),Xe.type=\"checkbox\",m.checkOn=\"\"!==Xe.value,m.optSelected=Qe.selected,(Xe=w.createElement(\"input\")).value=\"t\",Xe.type=\"radio\",m.radioValue=\"t\"===Xe.value;var tt,nt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return $(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return\"undefined\"==typeof e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(i=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?tt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+\"\"),n):i&&\"get\"in i&&null!==(r=i.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&\"radio\"===t&&S(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),tt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\\w+/g),function(e,t){var a=nt[t]||E.find.attr;nt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=nt[o],nt[o]=r,r=null!=a(e,t,n)?o:null,nt[o]=i),r}});var rt=/^(?:input|select|textarea|button)$/i,it=/^(?:a|area)$/i;function ot(e){return(e.match(H)||[]).join(\" \")}function at(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function st(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(H)||[]}E.fn.extend({prop:function(e,t){return $(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,i=E.propHooks[t]),void 0!==n?i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,\"tabindex\");return t?parseInt(t,10):rt.test(e.nodeName)||it.test(e.nodeName)&&e.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),m.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).addClass(t.call(this,e,at(this)))}):(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++)i=e[o],n.indexOf(\" \"+i+\" \")<0&&(n+=i+\" \");a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).removeClass(t.call(this,e,at(this)))}):arguments.length?(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(\" \"+i+\" \"))n=n.replace(\" \"+i+\" \",\" \")}a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this:this.attr(\"class\",\"\")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s=\"string\"===a||Array.isArray(t);return b(t)?this.each(function(e){E(this).toggleClass(t.call(this,e,at(this),n),n)}):\"boolean\"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=st(t),this.each(function(){if(s)for(o=E(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&\"boolean\"!==a||((r=at(this))&&Y.set(this,\"__className__\",r),this.setAttribute&&this.setAttribute(\"class\",r||!1===t?\"\":Y.get(this,\"__className__\")||\"\"))}))},hasClass:function(e){var t,n,r=0;t=\" \"+e+\" \";while(n=this[r++])if(1===n.nodeType&&-1<(\" \"+ot(at(n))+\" \").indexOf(t))return!0;return!1}});var ut=/\\r/g;E.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,E(this).val()):n)?t=\"\":\"number\"==typeof t?t+=\"\":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?\"\":e+\"\"})),(r=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&\"set\"in r&&void 0!==r.set(this,t,\"value\")||(this.value=t))})):t?(r=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&\"get\"in r&&void 0!==(e=r.get(t,\"value\"))?e:\"string\"==typeof(e=t.value)?e.replace(ut,\"\"):null==e?\"\":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,\"value\");return null!=t?t:ot(E.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a=\"select-one\"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,\"optgroup\"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=E.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<E.inArray(E.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each([\"radio\",\"checkbox\"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},m.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})}),m.focusin=\"onfocusin\"in g;var lt=/^(?:focusinfocus|focusoutblur)$/,ct=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,d=[n||w],p=y.call(e,\"type\")?e.type:e,h=y.call(e,\"namespace\")?e.namespace.split(\".\"):[];if(o=f=a=n=n||w,3!==n.nodeType&&8!==n.nodeType&&!lt.test(p+E.event.triggered)&&(-1<p.indexOf(\".\")&&(p=(h=p.split(\".\")).shift(),h.sort()),u=p.indexOf(\":\")<0&&\"on\"+p,(e=e[E.expando]?e:new E.Event(p,\"object\"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join(\".\"),e.rnamespace=e.namespace?new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||p,lt.test(s+p)||(o=o.parentNode);o;o=o.parentNode)d.push(o),a=o;a===(n.ownerDocument||w)&&d.push(a.defaultView||a.parentWindow||g)}i=0;while((o=d[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||p,(l=(Y.get(o,\"events\")||Object.create(null))[e.type]&&Y.get(o,\"handle\"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&X(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!X(n)||u&&b(n[p])&&!x(n)&&((a=n[u])&&(n[u]=null),E.event.triggered=p,e.isPropagationStopped()&&f.addEventListener(p,ct),n[p](),e.isPropagationStopped()&&f.removeEventListener(p,ct),E.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),m.focusin||E.each({focus:\"focusin\",blur:\"focusout\"},function(n,r){var i=function(e){E.event.simulate(r,e.target,E.event.fix(e))};E.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}}),E.parseXML=function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{t=(new g.DOMParser).parseFromString(e,\"text/xml\")}catch(e){}return n=t&&t.getElementsByTagName(\"parsererror\")[0],t&&!n||E.error(\"Invalid XML: \"+(n?E.map(n.childNodes,function(e){return e.textContent}).join(\"\\n\"):e)),t};var ft,dt=/\\[\\]$/,pt=/\\r?\\n/g,ht=/^(?:submit|button|image|reset|file)$/i,gt=/^(?:input|select|textarea|keygen)/i;function vt(n,e,r,i){var t;if(Array.isArray(e))E.each(e,function(e,t){r||dt.test(n)?i(n,t):vt(n+\"[\"+(\"object\"==typeof t&&null!=t?e:\"\")+\"]\",t,r,i)});else if(r||\"object\"!==T(e))i(n,e);else for(t in e)vt(n+\"[\"+t+\"]\",e[t],r,i)}E.param=function(e,t){var n,r=[],i=function(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)vt(n,e[n],t,i);return r.join(\"&\")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,\"elements\");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(\":disabled\")&&gt.test(this.nodeName)&&!ht.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(pt,\"\\r\\n\")}}):{name:t.name,value:n.replace(pt,\"\\r\\n\")}}).get()}}),E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not(\"body\").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},m.createHTMLDocument=((ft=w.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===ft.childNodes.length),E.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=w.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=w.location.href,t.head.appendChild(r)):t=w),o=!n&&[],(i=k.exec(e))?[t.createElement(i[1])]:(i=me([e],t,o),o&&o.length&&E(o).remove(),E.merge([],i.childNodes)));var r,i,o},E.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=E.css(e,\"position\"),c=E(e),f={};\"static\"===l&&(e.style.position=\"relative\"),s=c.offset(),o=E.css(e,\"top\"),u=E.css(e,\"left\"),(\"absolute\"===l||\"fixed\"===l)&&-1<(o+u).indexOf(\"auto\")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),\"using\"in t?t.using.call(e,f):c.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if(\"fixed\"===E.css(r,\"position\"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&\"static\"===E.css(e,\"position\"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=E(e).offset()).top+=E.css(e,\"borderTopWidth\",!0),i.left+=E.css(e,\"borderLeftWidth\",!0))}return{top:t.top-i.top-E.css(r,\"marginTop\",!0),left:t.left-i.left-E.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&\"static\"===E.css(e,\"position\"))e=e.offsetParent;return e||re})}}),E.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,i){var o=\"pageYOffset\"===i;E.fn[t]=function(e){return $(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),E.each([\"top\",\"left\"],function(e,n){E.cssHooks[n]=$e(m.pixelPosition,function(e,t){if(t)return t=Fe(e,n),Pe.test(t)?E(e).position()[n]+\"px\":t})}),E.each({Height:\"height\",Width:\"width\"},function(a,s){E.each({padding:\"inner\"+a,content:s,\"\":\"outer\"+a},function(r,o){E.fn[o]=function(e,t){var n=arguments.length&&(r||\"boolean\"!=typeof e),i=r||(!0===e||!0===t?\"margin\":\"border\");return $(this,function(e,t,n){var r;return x(e)?0===o.indexOf(\"outer\")?e[\"inner\"+a]:e.document.documentElement[\"client\"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body[\"scroll\"+a],r[\"scroll\"+a],e.body[\"offset\"+a],r[\"offset\"+a],r[\"client\"+a])):void 0===n?E.css(e,t,i):E.style(e,t,n,i)},s,n?e:void 0,n)}})}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var yt=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;E.proxy=function(e,t){var n,r,i;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||E.guid++,i},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=S,E.isFunction=b,E.isWindow=x,E.camelCase=V,E.type=T,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?\"\":(e+\"\").replace(yt,\"$1\")},\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return E});var mt=g.jQuery,bt=g.$;return E.noConflict=function(e){return g.$===E&&(g.$=bt),e&&g.jQuery===E&&(g.jQuery=mt),E},\"undefined\"==typeof e&&(g.jQuery=g.$=E),E});\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * AV1 codec mime type.\n     */\n    AV1: 'av1',\n\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED = 'rtc.lastn_endpoint_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed',\n\n    /**\n     * Designates an event indicating that some received video SSRCs will now map to\n     * new remote sources.\n     */\n    VIDEO_SSRCS_REMAPPED = 'rtc.video_ssrcs_remapped',\n\n    /**\n     * Designates an event indicating that some received audio SSRCs will now map to\n     * new remote sources.\n     */\n    AUDIO_SSRCS_REMAPPED = 'rtc.audio_ssrcs_remapped'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const LASTN_ENDPOINT_CHANGED = RTCEvents.LASTN_ENDPOINT_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\nexport const VIDEO_SSRCS_REMAPPED = RTCEvents.VIDEO_SSRCS_REMAPPED;\nexport const AUDIO_SSRCS_REMAPPED = RTCEvents.AUDIO_SSRCS_REMAPPED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_EVENT = 'xmpp.room-metadata.event',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_UPDATED = 'xmpp.room-metadata.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWStatusConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWStateConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","JitsiConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","FORWARDED_SOURCES_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","FACE_LANDMARK_ADDED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","METADATA_UPDATED","JitsiTrackEvents","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","TRACK_OWNER_CHANGED","CALLSTATS_SCRIPT_URL","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","error","options","devices","name","this","gum","constraints","Array","isArray","slice","undefined","message","join","constraintName","constraint","video","indexOf","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","Error","stack","prototype","Object","create","constructor","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","action","attributes","source","type","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","match","version","window","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","length","BrowserDetection","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","i","getBrowserName","getBrowserVersion","Number","parseInt","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","EventEmitter","clear","_storage","keys","getItem","keyName","setItem","keyValue","removeItem","key","n","serialize","JSON","stringify","jitsiLocalStorage","super","localStorage","_localStorageDisabled","ignore","console","warn","isLocalStorageDisabled","emit","dontEmitChangedEvent","localStorageContent","logger","getLogger","info","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","platform","Boolean","test","isEngine","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","matches","isSupported","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","addEventListener","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","stream","ReadableStream","postMessage","supportsAudioRed","codecs","some","codec","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","process","versions","chromium","ua","reset","disposed","analyticsHandlers","Set","cache","permanentProperties","conferenceName","addPermanentProperties","browser","dispose","size","forEach","handler","setAnalyticsHandlers","handlers","_setUserProperties","event","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","push","splice","e","require","wrtcFuncNames","reportType","_fabrics","CallStats","static","msg","backend","log","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","values","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","data","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","ssrc","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","apply","GlobalOnErrorHandler","debugMethods","originalReportError","args","call","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","then","result","parse","addresses","catch","devicesData","_reportEvent","conferenceID","overall","comment","Promise","resolve","reject","sendUserFeedback","status","reason","mute","tpc","remoteUserID","add","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","start","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","context","LocalStatsCollector","interval","callback","intervalId","intervalMilis","audioLevel","analyser","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","reduce","a","b","filterPositiveValues","filter","value","isLocalStatsSupported","resume","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","array","Uint8Array","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","stop","clearInterval","disconnect","disconnectAudioContext","async","close","connectAudioContext","suspend","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","emitter","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","list","entries","getEntries","task","Math","max","duration","observer","observe","buffered","startTime","Date","now","longTasksIntervalId","_lastTimeStamp","rate","StatisticsEvents","stopObserver","MediaType","init","flags","_runInLiteMode","runInLiteMode","_receiveMultipleVideoStreams","receiveMultipleVideoStreams","_sendMultipleVideoStreams","sendMultipleVideoStreams","_sourceNameSignaling","sourceNameSignaling","_ssrcRewriting","ssrcRewritingEnabled","_usesUnifiedPlan","enableUnifiedOnChrome","isMultiStreamSupportEnabled","isReceiveMultipleVideoStreamsSupported","isRunInLiteModeEnabled","isSourceNameSignalingEnabled","isSsrcRewritingSupported","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","bandwidth","packetLoss","transport","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","Map","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","errorCallback","callErrorHandler","startAudioLevelStats","audioLevels","getAudioLevels","hasOwnProperty","getStats","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","track","getTrackBySSRC","isAudioTrack","FeatureFlags","sourceName","getSourceName","width","height","codecDesc","participantId","getParticipantId","userResolutions","userFramerates","userCodecs","audio","total","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","v","isNaN","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","timestamp","bitrateKbps","byteSentStats","nominated","state","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","get","remoteCandidateId","localUsedCandidate","localCandidateId","ip","address","port","localip","protocol","conferenceStatsTransport","t","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","id","set","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","bytesSent","codecId","codecShortType","split","kind","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getSsrcByTrackId","trackIdentifier","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getLocalSSRC","AUDIO","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","ScriptUtil","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","defineProperty","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","localStat","LocalStats","stopLocalStats","getOriginalStream","addAudioLevelListener","listener","on","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","removeAllListeners","startCallStats","has","endsWith","roomName","lastIndexOf","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","silence","sendActiveDeviceListEvent","globalSet","userId","sendGetUserMediaFailed","err","formatJitsiTrackErrorForCallStats","sendLog","m","globalSubSet","next","csPerStats","sendApplicationLog","sendFeedback","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","JitsiConferenceEventManager","xmppListeners","session","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","EventEmitterForwarder","addListener","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","getParticipantById","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","forward","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","leave","_onConferenceRestarted","_onIceConnectionFailed","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","node","setProperty","tagName","substring","onMemberKicked","bind","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","role","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","dominantSpeakerIsSilent","roomjid","performance","getActiveMediaSession","videoSsrcsRemapped","audioSsrcsRemapped","ufrag","isVideoTrack","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","config","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","find","p","getJid","enabled","setupStatisticsListeners","level","setAudioLevel","startSilent","onByteSentStatsReceived","ParticipantConnectionStatus","ACTIVE","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","off","participantIds","clearTimeout","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","timeout","participants","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","setTimeout","JitsiParticipant","displayName","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","_features","getConference","getProperty","getTracks","jitsiTrack","isWebRTCTrackMuted","oldValue","getDisplayName","getStatsID","isHidden","isHiddenFromRecorder","user","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","getConnectionJid","_connectionJid","setConnectionJid","newJid","JitsiConnectionEvents","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","JitsiConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","promise","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","removeEventListener","kJitsiE2EE","Symbol","E2EEcontext","sharedKey","baseUrl","ljm","document","querySelector","idx","src","workerUrl","workerBlob","Blob","URL","createObjectURL","_worker","Worker","onerror","operation","cleanup","cleanupAll","handleReceiver","receiver","transform","receiverStreams","readableStream","readable","writableStream","writable","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","index","v4","REQ_TIMEOUT","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","d","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","body","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","newValue","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","events","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","crypto","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","hash","ArrayBuffer","ratchet","getRandomValues","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","each","_","el","getAttribute","category","Caps","connection","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","f","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","response","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","sort","accumulatedValue","tmp","sortedFeatures","b64_sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","min","retry","minDelay","base","floor","random","pow","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","url","service","search","pattern","oldToken","replace","toString","cancel","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","includes","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","c","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","shift","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","readyState","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_maybeStartWSKeepAlive","plugin","addHandler","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","flush","enable","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","send","stanza","elem","errback","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","obj","removed","media","approved","whitelists","newWhitelists","oldList","newList","x","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","j","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","RoomMetadata","_metadata","setMetadata","getMetadata","roomMetadataComponentAddress","metadata","_callStatsUserName","_machineId","externalStorage","callStatsUserName","username","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","sessionId","substr","createExpBackoffTimer","step","count","Moderator","origin","location","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","focus","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","attr","parseConfigOptions","authenticationEnabled","IDENTITY_UPDATED","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","text","anonymousdomain","waitMs","retrySec","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","str","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","parser","packet2JSON","xmlElement","nodes","child","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","ChatRoom","password","XMPP","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","roomMetadata","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","roomMetadataEl","roomMetadataText","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","getElementsByTagName","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","tags","hiddenFromRecorderFeatureEnabled","tag","groupInfo","group","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getMetadataHandler","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","end","endConferenceComponentAddress","MucConnectionPlugin","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","$build","s","_createSsrcGroupExtension","ssrcGroupCompactJson","semantics","_getOrCreateRtpDescription","jingle","description","content","appendChild","expandSourcesFromJson","jsonMessageXml","sources","audioRtpDescription","videoRtpDescription","ssrcMap","ssrcs","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","MediaDirection","ScreenObtainer","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","setScreenSharingResolutionConstraints","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","findLine","parseICEUfrag","parseICEPwd","line","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","parseMLine","parts","proto","pop","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","toLowerCase","priority","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseVideoTypeLine","videoTypeLine","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","numSsrcs","map","ssrcInfo","numGroups","ssrcGroups","primarySsrc","fidGroup","simGroup","generateSsrc","RandomUtil","getSsrcAttribute","mLine","attributeName","ssrcLine","attribute","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","rtp","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","fmtp","item","rtxApts","rtxPts","keepPts","rtcpFb","ConnectionData","localConnectionType","remoteConnectionType","SDP","mediaI","raw","arrayEquals","array1","array2","l","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","mid","clonedeep","RECVONLY","msid","concat","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","k","rtcpFbToJingle","availableSsrc","ssrcParameters","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","senders","SENDRECV","localBandwidth","getLocalConnectionType","transportToJingle","sctpport","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fb","hasAttribute","fromJingle","contents","jingle2media","sctp","payloadType","remoteBandwidthValue","setRemoteConnectionType","setAttribute","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","fallback","fn","wrap","defer","setImmediate$1","handlePromise","invokeCallback","isAsync","toStringTag","wrapAsync","asyncFn","func","awaitify","arity","cbArgs","applyEach","eachfn","fns","callArgs","that","cb","_asyncMap","arr","iteratee","results","counter","_iteratee","iterCb","isArrayLike","breakLoop","once","wrapper","callFn","assign","onlyOnce","asyncEachOfLimit","generator","limit","done","canceled","awaiting","running","replenish","iterDone","iterateeCallback","handleError","eachOfLimit","RangeError","asyncIterator","isAsyncIterable","nextElem","coll","len","createArrayIterator","okeys","iterator","getIterator","createES2015Iterator","createIterator","looping","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","eachOfSeries$1","DLL","head","tail","removeLink","prev","empty","insertAfter","newNode","insertBefore","setInitial","toArray","cur","testFn","curr","dll","queue","worker","concurrency","numRunning","workersList","drain","saturated","unsaturated","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","rej","promiseCallback","q","started","_tasks","_createCB","tasks","buffer","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","paused","datum","pushAsync","kill","unshiftAsync","pause","defineProperties","memo","mapLimit$1","concatLimit$1","val","mapResults","_createTester","check","getResult","testResult","testPassed","consoleFunc","resultArgs","_withoutIndex","bool","_fn","_test","truth","eachLimit$2","eachSeries$1","filterArray","truthValues","filterGeneric","_filter","sync","innerArgs","ensureAsync","newObj","taskCb","Heap","heap","pushCount","MIN_SAFE_INTEGER","percUp","smaller","percDown","top","TypeError","criteria","comparator","left","right","rest","taskIndex","nextTask","AsyncQueue","_queue","_processQueueTasks","items","_stopped","finishedCallback","shutdown","JingleSessionState","PENDING","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","MediaSessionEvents","IQ_TIMEOUT","_addSourceElement","ssrc_","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","receiverConstraints","sourceFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_sourceReceiverConstraints","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","numRemoteVideoSources","numRemoteAudioSources","remoteSourceMaxFrameHeights","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","usesUnifiedPlan","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","H264","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","getRemoteSourcesRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","candidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","addTrack","all","createOffer","offerSdp","setLocalDescription","processLocalSdpForTransceiverInfo","sendSessionInitiate","setAnswer","jingleAnswer","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","RTCSessionDescription","setRemoteDescription","newLocalSdp","sendContentModify","jingleOfferAnswerIq","audioTracks","tracks","bridgeSessionId","_responderRenegotiate","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","sourceReceiverConstraints","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","jitsiLocalTrack","getLocalVideoTracks","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","getRemoteTracks","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","getNewSources","newSources","mappedSources","addRemoteSsrc","_setVideoType","setNewSource","rtx","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","remoteSdp","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","createAnswer","answer","offer","replaceTracks","oldLocalSDP","recvOnlyTransceiver","getTransceivers","currentDirection","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","setSourceName","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackToPc","_addRemoveTrack","removeTrackFromPc","isRemove","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","sourceMaxFrameHeights","parseSourceMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","errResponse","errorElSel","code","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","integerHash","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","href","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","deploymentInfo","_components","trace","errStatusCapture","exec","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","caps","initFeaturesList","disableBeforeUnloadHandlers","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","deleteHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","backendRelease","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","trim","header","sendFaceExpressionEvent","expression","faceExpression","jsonString","users","created_timestamp","force","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","mode","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","sendSourceVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","forwardedSources","videoConstraints","onclose","jsonObject","logDisabled_","deprecationWarnings_","extractVersion","uastring","expr","pos","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","nativeEventName","arguments","wrappedCallback","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","enumerable","configurable","disableLog","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","RTCIceGatherer","isObject","compactObject","accumulator","isObj","isEmptyObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","trackId","logging","utils","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","r","ideal","exact","oldname_","prefix","charAt","toUpperCase","oc","mix","advanced","shimConstraints_","remap","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","dev","label","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","getAudioTracks","getVideoTracks","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","MediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","getReceivers","Event","transceiver","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","origRemoveTrack","removeTrack","origAddStream","addStream","origRemoveStream","removeStream","origGetSenders","shimGetStats","origGetStats","selector","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","names","stat","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","RegExp","replaceExternalStreamId","alreadyExists","oldStream","method","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","fixNegotiationNeeded","target","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","scaleResolutionDownBy","maxFramerate","getParameters","encodings","setParameters","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","successCallback","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConstraints","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","SDPUtils","augmentedCandidate","toJSON","usernameFragment","shimMaxMessageSize","_sctp","sctpInDescription","sections","mediaSection","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","maxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","byteLength","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimParameterlessSetLocalDescription","nativeSetLocalDescription","shimChrome","shimFirefox","shimSafari","adapter","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","createElement","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","attachMediaStream","element","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","screenObtainer","isDeviceListAvailable","ds","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","newAudioLevel","getMSID","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackToPc","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","_removeLocalTrackFromPc","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","PRESENTER","streamInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","unmute","opts","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","every","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","sessionVersion","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","getSourceIndexFromSourceName","nameParts","SignalingLayer","getSSRCOwner","getPeerSourceInfo","getTrackSourceName","setTrackMuteStatus","setTrackVideoType","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","ssrcCache","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","_hasHadVideoTrack","_hasHadAudioTrack","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","videoMlines","nameExists","trackIndex","trackIndexParts","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","primarySsrcMsid","primarySsrcCname","cname","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","clearSsrcCache","setSsrcCache","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","numOfLayers","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","addAssociatedAttributes","simSsrcs","simSsrc","_generateSsrc","mungeLocalDescription","simulcastSsrcs","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","restoringTimer","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","figureOutStreamingStatus","_onForwardedSourcesChanged","onForwardedSourcesChanged","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","oldStreamingStatus","streamingStatus","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","listenerCount","_initTrackStreamingStatus","_disposeTrackStreamingStatus","REMOTE_TRACK_MUTE","REMOTE_TRACK_UNMUTE","setMute","getSSRC","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","VP8","localStreamEncodingsConfig","maxBitrate","_getStreamEncodings","localTrack","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","encoding","_capScreenshareBitrate","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","lowFpsScreenshare","isNewLocalSource","stopped","transceiverMid","_localTrackTransceiverMids","setEncodings","parameters","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","remoteSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_usesTransceiverCodecPreferences","interop","Simulcast","explodeRemoteSimulcast","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","time","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getDesktopTrackMid","desktopTrack","_getReceiversByEndpointIds","endpoints","remoteTrackIds","audioReceivers","getSynchronizationSources","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","isSharingLowFpsScreen","_isSharingScreen","_mungeCodecOrder","customParsedSDP","customMline","customMlineaudio","getRemoteConnectionType","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","lowFps","codecPreference","findSenderByKind","localSdp","mLines","oldTrackSSRC","mediaActive","_ensureSimulcastGroupIsLast","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","localSources","remoteSources","_mungeOpus","enableOpusDtx","opusMaxAverageBitrate","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","usedtx","mungedConfig","_mungeInactive","_initializeDtlsTransport","onstatechange","_setVp9MaxBitrates","isLocalSdp","VP9","bitrates","hdBitrate","isSharingScreen","currentDescription","mungeRemoteDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","write","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","ULPFEC","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIndex","sourceIdentifier","newSSRCNum","oldSSRCNum","existing","activeStreams","currNumSsrcs","ConnectionQualityEvents","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_forwardedSources","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","oldForwardedSources","setNewReceiverVideoConstraints","setVideoType","sendSourceVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","DESKTOP","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","numRequestsWithResponses","totalNumRequests","JitsiE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","_getDefaultSourceReceiverConstraints","remoteVideoTracks","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","isEndpointsFormat","isSourcesFormat","p2pSession","mappedConstraints","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","sourceConstraints","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","_selectSendMaxFrameHeight","activeMediaSession","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_jibriJid","_statusFromJicofo","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getJibriJid","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setStatusFromJicofo","setJibriJid","jibriJid","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFaceLandmarkAdd","_updateStats","oldDominantSpeaker","newDominantSpeaker","setDominantSpeaker","savedUser","markAsHasLeft","newName","setDisplayName","addFaceExpression","newStats","speakerStatsToUpdate","newParticipant","totalDominantSpeakerTime","setFaceExpressions","faceExpressions","RecordingResult","blob","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","ondataavailable","dataEvent","recorderToRemove","style","click","revokeObjectURL","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","TranscriptionService","recordingResult","verify","formatResponse","audioBlob","SphinxService","AbstractTranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","XMLHttpRequest","onreadystatechange","DONE","responseText","open","setRequestHeader","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","offset","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","addCommandListener","processVersions","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","existingName","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","getSessionByJibriJid","_handleFocusPresence","_handleJibriPresence","prevStatus","_emitSessionUpdate","startRecording","_addSession","stopRecording","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_audioSenderLimitReached","_videoSenderLimitReached","JitsiConnection","appID","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","JitsiMediaDevicesEvents","resourceCreator","isAuthenticatedUser","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","isEndConferenceSupported","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_setNewVideoType","videoTypeChanged","videoTypeTagName","trackVideoType","legacyTypeChanged","presenceChanged","audioMuteChanged","videoMuteChanged","addPromises","removePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","first","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","audioMuteStatusChanged","videoMuteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initJitsiConference","getLogs","DEVICE_LIST_CHANGED","PERMISSIONS_CHANGED","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","CustomSignalingLayer","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","Logger","getAnalyticsAttributesFromOptions","video_requested","getLocalConnectionData","setLocalConnectionData","setLocalConnectionType","getRemoteConnectionData","setRemoteConnectionData","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","ERROR","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errors","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","setLogLevel","setLogLevelById","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","AuthUtil","JitsiMeetJS","_mergeNamespaceAndModule","isLocalStats","_userId","_isLocalStats","_dominantSpeakerStart","_isDominantSpeaker","_isSilent","_hasLeft","_faceExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","getFaceExpressions","getTokenAuthUrl","urlPattern","roleUpgrade","dest","srcEvent","Function","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","currentExecutingScript","loadScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","onload","parentNode","string","char","charCodeAt","abs","generateUsername","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","arg","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","reschedule","isReady","cachedQueue","storeLogs","consoleTransport","globalTransports","addGlobalTransport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","transports","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","grammar","reg","o","format","u","z","subtype","sessionConfig","raddr","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","writer","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","_restoreSimulcast","enableConferenceFlag","order","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","num","output","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","getParser","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","is","versionName","vendor","model","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","currentScript","thrownErr","near","far","ReflectOwnKeys","R","Reflect","ReflectApply","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","_addListener","warning","newListener","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","copy","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","prependOnceListener","position","originalListener","spliceOne","rawListeners","eventNames","g","flat","y","nodeType","nonce","noModule","C","removeChild","T","E","jquery","pushStack","prevObject","eq","last","even","grep","odd","extend","isPlainObject","expando","noop","globalEval","makeArray","inArray","guid","support","h","A","N","ue","S","D","L","O","P","H","I","B","M","W","F","U","V","X","Q","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","needsContext","Y","G","K","J","Z","ee","ne","fromCharCode","re","oe","ae","xe","dir","childNodes","se","ownerDocument","getElementById","getElementsByClassName","qsa","ye","scope","be","querySelectorAll","removeAttribute","cacheLength","le","ce","fe","attrHandle","de","nextSibling","pe","he","ge","isDisabled","ve","isXML","namespaceURI","documentElement","setDocument","defaultView","className","createComment","getById","getElementsByName","getAttributeNode","innerHTML","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","contains","sortDetached","specified","escape","uniqueSort","detectDuplicates","sortStable","getText","firstChild","nodeValue","selectors","createPseudo","relative","preFilter","lastChild","uniqueID","pseudos","setFilters","not","lang","activeElement","hasFocus","tabIndex","checked","selected","selectedIndex","parent","input","button","lt","gt","nth","radio","checkbox","file","image","we","Ce","Te","Ee","filters","tokenize","compile","select","defaultValue","unique","isXMLDoc","escapeSelector","parseHTML","ready","closest","prevAll","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","siblings","contentDocument","fail","Callbacks","stopOnFalse","memory","fireWith","fire","always","pipe","progress","notify","notifyWith","resolveWith","exceptionHook","stackTrace","rejectWith","getStackHook","when","readyException","readyWait","doScroll","uid","access","hasData","removeData","_data","_removeData","dequeue","_queueHooks","clearQueue","composed","getRootNode","display","css","show","hide","toggle","createDocumentFragment","checkClone","cloneNode","noCloneChecked","option","thead","col","tr","td","_default","tbody","tfoot","colgroup","caption","th","optgroup","htmlPrefilter","createTextNode","namespace","isTrigger","special","delegateType","stopPropagation","stopImmediatePropagation","preventDefault","global","handle","triggered","dispatch","bindType","origType","delegateCount","teardown","removeEvent","fix","delegateTarget","preDispatch","isPropagationStopped","currentTarget","isImmediatePropagationStopped","rnamespace","handleObj","postDispatch","addProp","originalEvent","load","noBubble","beforeunload","returnValue","isDefaultPrevented","defaultPrevented","relatedTarget","timeStamp","isSimulated","altKey","bubbles","cancelable","changedTouches","ctrlKey","detail","eventPhase","metaKey","pageX","pageY","shiftKey","view","charCode","keyCode","buttons","clientX","clientY","offsetX","offsetY","pointerId","pointerType","screenX","screenY","targetTouches","toElement","touches","which","blur","mouseenter","mouseleave","pointerenter","pointerleave","one","Ae","Ne","Se","ke","De","Le","je","qe","html","_evalUrl","Oe","cleanData","append","after","replaceWith","replaceChild","appendTo","prependTo","replaceAll","Pe","He","Ie","opener","getComputedStyle","Re","Be","Me","We","Fe","getPropertyValue","pixelBoxStyles","$e","cssText","marginLeft","offsetWidth","backgroundClip","clearCloneStyle","boxSizingReliable","pixelPosition","reliableMarginLeft","scrollboxSize","reliableTrDimensions","borderTopWidth","borderBottomWidth","offsetHeight","ze","_e","Ue","Ve","cssProps","Xe","Qe","Ye","Ge","visibility","Ke","letterSpacing","fontWeight","Je","Ze","ceil","et","getClientRects","cssHooks","opacity","cssNumber","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","orphans","widows","zIndex","zoom","isFinite","getBoundingClientRect","margin","padding","border","expand","fx","speeds","checkOn","optSelected","radioValue","tt","nt","removeAttr","attrHooks","rt","it","ot","at","st","removeProp","propFix","propHooks","addClass","removeClass","toggleClass","hasClass","ut","valHooks","focusin","ct","parentWindow","simulate","triggerHandler","parseXML","ft","dt","ht","vt","param","encodeURIComponent","serializeArray","wrapAll","firstElementChild","wrapInner","visible","createHTMLDocument","implementation","setOffset","using","pageYOffset","pageXOffset","offsetParent","scrollLeft","scrollTop","scrollTo","Height","Width","unbind","delegate","undelegate","hover","yt","proxy","holdReady","parseJSON","isFunction","isWindow","camelCase","isNumeric","mt","jQuery","bt","noConflict","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","nodeWrap","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","initAccum","isHostObject","mapToArray","overArg","setToArray","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","assocIndexOf","baseClone","isDeep","isFull","customizer","isArr","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","getMapData","getValue","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","localCName","generateIdentifier","splitLines","splitSections","part","getDescription","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","writeCandidate","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","algorithm","getDtlsParameters","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","fec","mechanism","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","sctpPort","sctpMapLines","writeSctpDescription","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","netType","addressType","isValidSDP","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","str_hmac_sha1","str_sha1","out","cookies","cookieName","expires","path","cookieObj","cookieValue","unescape","cookie","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","validTag","validAttribute","validCSS","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlTextNode","xmlescape","xmlunescape","xmlHtmlNode","loadXML","copyElement","_i","createHtml","cssAttrs","cssName","cssValue","_i2","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","fileName","lineNumber","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","impNode","xmlGen","importNode","newElem","fragment","xhtml","Handler","ns","matchBare","matchBareFromJid","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Connection","_this2","Websocket","Bosh","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","mechanisms","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","authzid","servtype","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","xmlOutput","nextValidRid","_queueData","_this3","timeoutHandler","deleteTimedHandler","addTimedHandler","_this4","iqtype","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","statusChanged","_dataRecv","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_i5","_hand","_connect_cb","_callback","bodyWrap","mech","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","_auth2_cb","_this7","serverSignature","streamfeature_handlers","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","_this8","_i6","_thand","SASLMechanism","auth_str","test_cnonce","cnonce","Hi","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","Strophe$2","$build$2","new_service","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_onOpen","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","_streamWrap","CLOSED","closeString","rawStanza","startString","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","_buildIQResult","query_attrs","iqresult","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","tl","tmh","_md","hashfunc","generateUUID","stringToBytes","uuidToBytes","DNS","rnds","_sha","CAMERA","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","AV1","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_REMOVED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","VIDEO_SSRCS_REMAPPED","AUDIO_SSRCS_REMAPPED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}